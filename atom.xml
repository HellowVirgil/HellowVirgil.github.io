<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>VirgilZone</title>
  <subtitle>但行好事，莫问前程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hellowvirgil.github.io/"/>
  <updated>2017-02-27T13:46:42.000Z</updated>
  <id>http://hellowvirgil.github.io/</id>
  
  <author>
    <name>Virgil</name>
    <email>1135895008@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SVG实践</title>
    <link href="http://hellowvirgil.github.io/2017/02/25/SVG%E5%AE%9E%E8%B7%B5/"/>
    <id>http://hellowvirgil.github.io/2017/02/25/SVG实践/</id>
    <published>2017-02-25T09:31:30.000Z</published>
    <updated>2017-02-27T13:46:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>很早就学习了SVG相关知识，但是一直没有在项目中用到。这次开发阿拉丁卡片中的一个折线图组件，终于让这部分知识有了用武之地，果然还是实践出真知，在开发的过程中踩了很多坑。</p>
<p>刚这接到折线图这个需求时，脑海中的第一反应是可以通过canvas或SVG实现，最后调研一番决定使用SVG。我们先来看看canvas和SVG各自的使用场景。</p>
<a id="more"></a>
<blockquote>
<p>SVG</p>
</blockquote>
<p>SVG 是一种使用 XML 描述 2D 图形的语言。<br>SVG 基于 XML，这意味着 SVG DOM 中的每个元素都是可用的。您可以为某个元素附加 JavaScript 事件处理器。<br>在 SVG 中，每个被绘制的图形均被视为对象。如果 SVG 对象的属性发生变化，那么浏览器能够自动重现图形。</p>
<blockquote>
<p>Canvas</p>
</blockquote>
<p>Canvas 通过 JavaScript 来绘制 2D 图形。<br>Canvas 是逐像素进行渲染的。<br>在 canvas 中，一旦图形被绘制完成，它就不会继续得到浏览器的关注。如果其位置发生变化，那么整个场景也需要重新绘制，包括任何或许已被图形覆盖的对象。</p>
<blockquote>
<p>Canvas 与 SVG 的比较</p>
</blockquote>
<p>下表列出了 canvas 与 SVG 之间的一些不同之处。</p>
<p><strong><em> Canvas </em></strong></p>
<ul>
<li>依赖分辨率</li>
<li>不支持事件处理器</li>
<li>弱的文本渲染能力</li>
<li>能够以 .png 或 .jpg 格式保存结果图像</li>
<li>最适合图像密集型的游戏，其中的许多对象会被频繁重绘</li>
</ul>
<p><strong><em> SVG </em></strong></p>
<ul>
<li>不依赖分辨率</li>
<li>支持事件处理器</li>
<li>最适合带有大型渲染区域的应用程序（比如谷歌地图）</li>
<li>复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）</li>
<li>不适合游戏应用</li>
</ul>
<p>回过头来再看我们的需要实现的折线图组件，下面是UE给的设计图。</p>
<p><img src="http://7xiw1x.com1.z0.glb.clouddn.com/SVG-1.png" alt="UE设计图"></p>
<p>通过分析需求及UE设计图，我们可以得到下面这些信息。</p>
<ul>
<li>在wap展现，需要兼容多种分辨率</li>
<li>需要添加简单的事件交互</li>
<li>没有复杂的动画</li>
</ul>
<p>显然SVG更满足我们的需求，确定技术选型后，我们来看看怎么实现。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"sfc-wk-major-salary-svgBox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"sfc-wk-major-salary-svg"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">svg</span> <span class="attribute">class</span>=<span class="value">"sfc-wk-major-salary-svgself"</span> <span class="attribute">version</span>=<span class="value">"1.1"</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.w3.org/2000/svg"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 该专业 --&gt;</span></span><br><span class="line">                &#123;%foreach $xyAxis as $item%&#125;</span><br><span class="line">                &#123;%if $item@first%&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="title">path</span> <span class="attribute">class</span>=<span class="value">"sfc-wk-major-salary-svg-yItem sfc-wk-major-salary-svg-yItem1"</span> <span class="attribute">d</span>=<span class="value">"M 0 100 L 0 100"</span> <span class="attribute">style</span>=<span class="value">"stroke:#ff6400; stroke-width:2"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">circle</span> <span class="attribute">class</span>=<span class="value">"sfc-wk-major-salary-svg-yPos sfc-wk-major-salary-svg-yPos1"</span> <span class="attribute">cx</span>=<span class="value">"0"</span> <span class="attribute">cy</span>=<span class="value">"100"</span> <span class="attribute">r</span>=<span class="value">"4"</span> <span class="attribute">fill</span>=<span class="value">"#ff6400"</span> /&gt;</span></span><br><span class="line">                &#123;%else%&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="title">path</span> <span class="attribute">class</span>=<span class="value">"sfc-wk-major-salary-svg-yItem sfc-wk-major-salary-svg-yItem1"</span> <span class="attribute">d</span>=<span class="value">"M 0 100 L 0 100 "</span> <span class="attribute">style</span>=<span class="value">"stroke:#ff6400; stroke-width:2"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">circle</span> <span class="attribute">class</span>=<span class="value">"sfc-wk-major-salary-svg-yPos sfc-wk-major-salary-svg-yPos1"</span> <span class="attribute">cx</span>=<span class="value">"0"</span> <span class="attribute">cy</span>=<span class="value">"100"</span> <span class="attribute">r</span>=<span class="value">"4"</span> <span class="attribute">fill</span>=<span class="value">"#ff6400"</span> /&gt;</span></span><br><span class="line">                &#123;%/if%&#125;</span><br><span class="line">                &#123;%/foreach%&#125;</span><br><span class="line">                <span class="comment">&lt;!-- &lt;path class="sfc-wk-major-salary-svg-yItem sfc-wk-major-salary-svg-yItem1" d="M 0 100 L 0 100 " style="stroke:#ff6400; stroke-width:2"/&gt; --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 所有专业 --&gt;</span></span><br><span class="line">                &#123;%foreach $xyAxis2 as $item%&#125;</span><br><span class="line">                &#123;%if $item@first%&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="title">path</span> <span class="attribute">class</span>=<span class="value">"sfc-wk-major-salary-svg-yItem sfc-wk-major-salary-svg-yItem2"</span> <span class="attribute">d</span>=<span class="value">"M 0 100 L 0 100"</span> <span class="attribute">style</span>=<span class="value">"stroke:#2d8eff; stroke-width:2"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">circle</span> <span class="attribute">class</span>=<span class="value">"sfc-wk-major-salary-svg-yPos sfc-wk-major-salary-svg-yPos2"</span> <span class="attribute">cx</span>=<span class="value">"0"</span> <span class="attribute">cy</span>=<span class="value">"100"</span> <span class="attribute">r</span>=<span class="value">"4"</span> <span class="attribute">fill</span>=<span class="value">"#2d8eff"</span> /&gt;</span></span><br><span class="line">                &#123;%else%&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="title">path</span> <span class="attribute">class</span>=<span class="value">"sfc-wk-major-salary-svg-yItem sfc-wk-major-salary-svg-yItem2"</span> <span class="attribute">d</span>=<span class="value">"M 0 100 L 0 100 "</span> <span class="attribute">style</span>=<span class="value">"stroke:#2d8eff; stroke-width:2"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">circle</span> <span class="attribute">class</span>=<span class="value">"sfc-wk-major-salary-svg-yPos sfc-wk-major-salary-svg-yPos2"</span> <span class="attribute">cx</span>=<span class="value">"0"</span> <span class="attribute">cy</span>=<span class="value">"100"</span> <span class="attribute">r</span>=<span class="value">"4"</span> <span class="attribute">fill</span>=<span class="value">"#2d8eff"</span> /&gt;</span></span><br><span class="line">                &#123;%/if%&#125;</span><br><span class="line">                &#123;%/foreach%&#125;</span><br><span class="line">                <span class="comment">&lt;!-- &lt;path class="sfc-wk-major-salary-svg-yItem sfc-wk-major-salary-svg-yItem2" d="M 0 100 L 0 100 " style="stroke:#2d8eff; stroke-width:2"/&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">svg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 虚线 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"sfc-wk-major-salary-svg-line"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- y轴坐标 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"sfc-wk-major-salary-svg-yAxis"</span>&gt;</span></span><br><span class="line">            &#123;%foreach $xyAxis as $item%&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"sfc-wk-major-salary-svg-yAxis-item sfc-wk-major-salary-svg-yAxis-item1 c-line-clamp1 c-gray"</span>&gt;</span>&#123;%$item.y|escape%&#125;<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">            &#123;%/foreach%&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- y轴坐标2 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"sfc-wk-major-salary-svg-yAxis"</span>&gt;</span></span><br><span class="line">            &#123;%foreach $xyAxis2 as $item%&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"sfc-wk-major-salary-svg-yAxis-item sfc-wk-major-salary-svg-yAxis-item2 c-line-clamp1 c-gray"</span>&gt;</span>&#123;%$item.y|escape%&#125;<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">            &#123;%/foreach%&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- x轴坐标 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"sfc-wk-major-salary-svg-xAxis c-gap-bottom c-gap-top"</span>&gt;</span></span><br><span class="line">            &#123;%foreach $xyAxis as $item%&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"sfc-wk-major-salary-svg-xAxis-item c-gray"</span> <span class="attribute">style</span>=<span class="value">"width:&#123;%100/count($xyAxis)|cat:'%'%&#125;"</span>&gt;</span>&#123;%$item.x|escape%&#125;<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">            &#123;%/foreach%&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 颜色注释 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"c-gap-bottom"</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"sfc-wk-major-salary-the-major c-gap-right-small"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"c-gap-right"</span>&gt;</span>本专业<span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"sfc-wk-major-salary-all-major c-gap-right-small"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>所有专业</span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 折线注释 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"sfc-wk-major-salary-svg-remark c-line-top"</span>&gt;</span></span><br><span class="line">		&#123;%foreach $tplData.remark as $item%&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"c-gray"</span>&gt;</span>&#123;%$item|escape%&#125;<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">        &#123;%/foreach%&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.sfc-wk-major-salary-svgBox</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.sfc-wk-major-salary-svg</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">200px</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.sfc-wk-major-salary-svgself</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.sfc-wk-major-salary-svg-yAxis-item</span>, <span class="class">.sfc-wk-major-salary-svg-xAxis-item</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.sfc-wk-major-salary-svg-yAxis-item</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">top</span>:<span class="value"> -<span class="number">999px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">left</span>:<span class="value"> -<span class="number">999px</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.sfc-wk-major-salary-the-major</span>, <span class="class">.sfc-wk-major-salary-all-major</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.sfc-wk-major-salary-the-major</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#ff6400</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.sfc-wk-major-salary-all-major</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#2d8eff</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.sfc-wk-major-salary-svg-remark</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">padding-top</span>:<span class="value"> <span class="number">0.08rem</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.sfc-wk-major-salary-svg-line-item</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">border-bottom</span>:<span class="value"> <span class="number">1px</span> dotted <span class="hexcolor">#cecece</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">var</span> $container = $(<span class="keyword">this</span>.container);</span><br><span class="line"><span class="keyword">var</span> $yAxis = _this.data.yAxis;</span><br><span class="line"><span class="keyword">var</span> $yAxis2 = _this.data.yAxis2;</span><br><span class="line"><span class="keyword">var</span> $svgBox = $container.find(<span class="string">".sfc-wk-major-salary-chart-wrapper"</span>);</span><br><span class="line"><span class="keyword">var</span> $svg = $container.find(<span class="string">".sfc-wk-major-salary-svg"</span>);</span><br><span class="line"><span class="keyword">var</span> $yPos = $container.find(<span class="string">".sfc-wk-major-salary-svg-yAxis-item1"</span>);</span><br><span class="line"><span class="keyword">var</span> $xAxis = $container.find(<span class="string">".sfc-wk-major-salary-svg-xAxis"</span>);</span><br><span class="line"><span class="keyword">var</span> num = $yAxis.length;</span><br><span class="line"><span class="keyword">var</span> $svgWidth = <span class="built_in">Math</span>.ceil($svgBox.width());</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 起点高度 */</span></span><br><span class="line"><span class="keyword">var</span> $svgheight = <span class="number">180</span>;</span><br><span class="line"><span class="keyword">var</span> start = $svgheight;</span><br><span class="line"><span class="keyword">var</span> maxPos = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> minPos = start, yAxis = start, prevY = start;</span><br><span class="line"><span class="keyword">var</span> xAxis = <span class="number">0</span>, prevX = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> cx = [], cy = [], maxY = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将yAxis和yAxis2存入maxY中 */</span></span><br><span class="line"><span class="keyword">var</span> allNum = num + $yAxis2.length;</span><br><span class="line"><span class="keyword">var</span> allAxis = $yAxis.concat($yAxis2);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;allNum; j++)&#123;</span><br><span class="line">    maxY[j] = <span class="built_in">parseFloat</span>(allAxis[j].y);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 找到yAxis和yAxis2中的最大值和最小值 */</span></span><br><span class="line"><span class="keyword">var</span> max = maxY[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> min = maxY[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k=<span class="number">0</span>;k&lt;maxY.length; k++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(max &lt; maxY[k])&#123; max = maxY[k] &#125;;</span><br><span class="line">    <span class="keyword">if</span>(min &gt; maxY[k])&#123; min = maxY[k] &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 最大值和最小值以1000为单位分别向上向下取整 */</span></span><br><span class="line">max = <span class="built_in">Math</span>.ceil(max / <span class="number">1000</span>) * <span class="number">1000</span>;</span><br><span class="line">min = <span class="built_in">Math</span>.floor(min / <span class="number">1000</span>) * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 计算刻度 */</span></span><br><span class="line"><span class="keyword">var</span> posChazhi = minPos-maxPos;</span><br><span class="line"><span class="keyword">var</span> percentChazhi = max-min;</span><br><span class="line"><span class="keyword">var</span> bili = posChazhi/percentChazhi;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 绘制虚线 每间隔1000绘制一条*/</span></span><br><span class="line"><span class="keyword">var</span> lineNum = (max - min) / <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">var</span> $lineWrapper = $container.find(<span class="string">".sfc-wk-major-salary-svg-line"</span>);</span><br><span class="line"><span class="keyword">var</span> lineH = posChazhi / (lineNum) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> html = <span class="string">'&lt;div class="sfc-wk-major-salary-svg-line-item" style="height: '</span> + maxPos + <span class="string">'px;"&gt;&lt;span style="position:absolute;top: 0px;"&gt;'</span> + max + <span class="string">'&lt;/span&gt;&lt;/div&gt;'</span>;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">0</span>;n &lt; lineNum;n++) &#123;</span><br><span class="line">    html += <span class="string">'&lt;div class="sfc-wk-major-salary-svg-line-item" style="height:'</span> + lineH + <span class="string">'px;"&gt;&lt;span style="position:absolute;top:'</span> + (lineH - <span class="number">20</span>) + <span class="string">'px;"&gt;'</span> + (max - (n + <span class="number">1</span>) * <span class="number">1000</span>) + <span class="string">'&lt;/span&gt;&lt;/div&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line">$lineWrapper.html(html);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SVG1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> jianju = <span class="built_in">Math</span>.round($svgWidth/num);</span><br><span class="line">    <span class="keyword">var</span> first = <span class="built_in">Math</span>.round(jianju/<span class="number">2</span>);</span><br><span class="line">    $xAxis.attr(<span class="string">"d"</span>,<span class="string">"M 0 "</span>+ $svgheight +<span class="string">" L "</span>+ $svgWidth +<span class="string">" "</span>+$svgheight);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;num; i++)&#123;       </span><br><span class="line">        <span class="keyword">var</span> yVal = <span class="built_in">parseFloat</span>($yAxis[i].y);</span><br><span class="line">        <span class="keyword">var</span> round = <span class="built_in">Math</span>.round((yVal-min)*bili);</span><br><span class="line">        yAxis = start-round;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">            xAxis = first;</span><br><span class="line">            <span class="comment">/* $svgBox.find(".sfc-wk-major-salary-svg-yItem1").eq(i).attr("d","M 0 "+start+" L "+xAxis+" "+yAxis); */</span></span><br><span class="line">            $svgBox.find(<span class="string">".sfc-wk-major-salary-svg-yPos1"</span>).eq(i).attr(&#123;<span class="string">"cx"</span>:xAxis,<span class="string">"cy"</span>:yAxis&#125;);</span><br><span class="line">            $yPos.eq(i).css(&#123;<span class="string">"top"</span>:(yAxis-<span class="number">20</span>)+<span class="string">"px"</span>,<span class="string">"left"</span>:(xAxis-<span class="number">15</span>)+<span class="string">"px"</span>&#125;);</span><br><span class="line">            cx[i] = xAxis;</span><br><span class="line">            cy[i] = yAxis;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> yVal1 = <span class="built_in">parseFloat</span>($yAxis[i-<span class="number">1</span>].y);</span><br><span class="line">            <span class="keyword">var</span> round1 = <span class="built_in">Math</span>.round((yVal1-min)*bili);</span><br><span class="line">            prevY = start-round1;            </span><br><span class="line">            xAxis = first + jianju*[i];</span><br><span class="line">            prevX = first + jianju*([i]-<span class="number">1</span>);</span><br><span class="line">            $svgBox.find(<span class="string">".sfc-wk-major-salary-svg-yItem1"</span>).eq(i).attr(<span class="string">"d"</span>,<span class="string">"M "</span>+prevX+<span class="string">" "</span>+prevY+<span class="string">" L "</span>+xAxis+<span class="string">" "</span>+yAxis);</span><br><span class="line">            $svgBox.find(<span class="string">".sfc-wk-major-salary-svg-yPos1"</span>).eq(i).attr(&#123;<span class="string">"cx"</span>:xAxis,<span class="string">"cy"</span>:yAxis&#125;);</span><br><span class="line">            $yPos.eq(i).css(&#123;<span class="string">"top"</span>:(yAxis-<span class="number">20</span>)+<span class="string">"px"</span>,<span class="string">"left"</span>:(xAxis-<span class="number">16</span>)+<span class="string">"px"</span>&#125;);</span><br><span class="line">            cx[i] = xAxis;</span><br><span class="line">            cy[i] = yAxis;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> xlast = $svgBox.find(<span class="string">".sfc-wk-major-salary-svg-yPos1"</span>).eq(num-<span class="number">1</span>).attr(<span class="string">'cx'</span>);</span><br><span class="line">    <span class="keyword">var</span> ylast = $svgBox.find(<span class="string">".sfc-wk-major-salary-svg-yPos1"</span>).eq(num-<span class="number">1</span>).attr(<span class="string">'cy'</span>);</span><br><span class="line"></span><br><span class="line">    $svgBox.find(<span class="string">".sfc-wk-major-salary-svg-yItem1"</span>).eq(num).attr(<span class="string">"d"</span>,<span class="string">"M "</span>+xlast+<span class="string">" "</span>+ylast+<span class="string">" L "</span>+$svgWidth+<span class="string">" "</span>+start);</span><br><span class="line">    <span class="keyword">var</span> points = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;num; j++)&#123;</span><br><span class="line">        points += cx[j]+<span class="string">' '</span>+cy[j]+<span class="string">' '</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SVG2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $yAxis = _this.data.yAxis2;</span><br><span class="line">    <span class="keyword">var</span> $yPos = $container.find(<span class="string">".sfc-wk-major-salary-svg-yAxis-item2"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> jianju = <span class="built_in">Math</span>.round($svgWidth/num);</span><br><span class="line">    <span class="keyword">var</span> first = <span class="built_in">Math</span>.round(jianju/<span class="number">2</span>);</span><br><span class="line">    $xAxis.attr(<span class="string">"d"</span>,<span class="string">"M 0 "</span>+ $svgheight +<span class="string">" L "</span>+ $svgWidth +<span class="string">" "</span>+$svgheight);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;num; i++)&#123;       </span><br><span class="line">        <span class="keyword">var</span> yVal = <span class="built_in">parseFloat</span>($yAxis[i].y);</span><br><span class="line">        <span class="keyword">var</span> round = <span class="built_in">Math</span>.round((yVal-min)*bili);</span><br><span class="line">        yAxis = start-round;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">            xAxis = first;</span><br><span class="line">            <span class="comment">/* $svgBox.find(".sfc-wk-major-salary-svg-yItem2").eq(i).attr("d","M 0 "+start+" L "+xAxis+" "+yAxis); */</span></span><br><span class="line">            $svgBox.find(<span class="string">".sfc-wk-major-salary-svg-yPos2"</span>).eq(i).attr(&#123;<span class="string">"cx"</span>:xAxis,<span class="string">"cy"</span>:yAxis&#125;);</span><br><span class="line">            $yPos.eq(i).css(&#123;<span class="string">"top"</span>:(yAxis-<span class="number">20</span>)+<span class="string">"px"</span>,<span class="string">"left"</span>:(xAxis-<span class="number">15</span>)+<span class="string">"px"</span>&#125;);</span><br><span class="line">            cx[i] = xAxis;</span><br><span class="line">            cy[i] = yAxis;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> yVal1 = <span class="built_in">parseFloat</span>($yAxis[i-<span class="number">1</span>].y);</span><br><span class="line">            <span class="keyword">var</span> round1 = <span class="built_in">Math</span>.round((yVal1-min)*bili);</span><br><span class="line">            prevY = start-round1;            </span><br><span class="line">            xAxis = first + jianju*[i];</span><br><span class="line">            prevX = first + jianju*([i]-<span class="number">1</span>);</span><br><span class="line">            $svgBox.find(<span class="string">".sfc-wk-major-salary-svg-yItem2"</span>).eq(i).attr(<span class="string">"d"</span>,<span class="string">"M "</span>+prevX+<span class="string">" "</span>+prevY+<span class="string">" L "</span>+xAxis+<span class="string">" "</span>+yAxis);</span><br><span class="line">            $svgBox.find(<span class="string">".sfc-wk-major-salary-svg-yPos2"</span>).eq(i).attr(&#123;<span class="string">"cx"</span>:xAxis,<span class="string">"cy"</span>:yAxis&#125;);</span><br><span class="line">            $yPos.eq(i).css(&#123;<span class="string">"top"</span>:(yAxis-<span class="number">20</span>)+<span class="string">"px"</span>,<span class="string">"left"</span>:(xAxis-<span class="number">16</span>)+<span class="string">"px"</span>&#125;);</span><br><span class="line">            cx[i] = xAxis;</span><br><span class="line">            cy[i] = yAxis;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> xlast = $svgBox.find(<span class="string">".sfc-wk-major-salary-svg-yPos2"</span>).eq(num-<span class="number">1</span>).attr(<span class="string">'cx'</span>);</span><br><span class="line">    <span class="keyword">var</span> ylast = $svgBox.find(<span class="string">".sfc-wk-major-salary-svg-yPos2"</span>).eq(num-<span class="number">1</span>).attr(<span class="string">'cy'</span>);</span><br><span class="line"></span><br><span class="line">    $svgBox.find(<span class="string">".sfc-wk-major-salary-svg-yItem2"</span>).eq(num).attr(<span class="string">"d"</span>,<span class="string">"M "</span>+xlast+<span class="string">" "</span>+ylast+<span class="string">" L "</span>+$svgWidth+<span class="string">" "</span>+start);</span><br><span class="line">    <span class="keyword">var</span> points = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;num; j++)&#123;</span><br><span class="line">        points += cx[j]+<span class="string">' '</span>+cy[j]+<span class="string">' '</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">SVG1();</span><br><span class="line">SVG2();</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">window</span>).resize(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $resizeWidth = <span class="built_in">Math</span>.ceil($svgBox.width());</span><br><span class="line">    $svgWidth = $resizeWidth;</span><br><span class="line">    SVG1();</span><br><span class="line">    SVG2();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>对应的数据结构为</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">treat</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">coordinate1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">xy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">x</span>&gt;</span>毕业三年<span class="tag">&lt;/<span class="title">x</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">y</span>&gt;</span>7911<span class="tag">&lt;/<span class="title">y</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">xy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">xy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">x</span>&gt;</span>毕业五年<span class="tag">&lt;/<span class="title">x</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">y</span>&gt;</span>9911<span class="tag">&lt;/<span class="title">y</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">xy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">xy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">x</span>&gt;</span>毕业七年<span class="tag">&lt;/<span class="title">x</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">y</span>&gt;</span>9000<span class="tag">&lt;/<span class="title">y</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">xy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">coordinate1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">coordinate2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">xy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">x</span>&gt;</span>毕业三年<span class="tag">&lt;/<span class="title">x</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">y</span>&gt;</span>8911<span class="tag">&lt;/<span class="title">y</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">xy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">xy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">x</span>&gt;</span>毕业五年<span class="tag">&lt;/<span class="title">x</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">y</span>&gt;</span>11341<span class="tag">&lt;/<span class="title">y</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">xy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">xy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">x</span>&gt;</span>毕业七年<span class="tag">&lt;/<span class="title">x</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">y</span>&gt;</span>8000<span class="tag">&lt;/<span class="title">y</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">xy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">coordinate2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">treat</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最终效果如下</p>
<p><img src="http://7xiw1x.com1.z0.glb.clouddn.com/SVG-2.png" alt="展示效果截图"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很早就学习了SVG相关知识，但是一直没有在项目中用到。这次开发阿拉丁卡片中的一个折线图组件，终于让这部分知识有了用武之地，果然还是实践出真知，在开发的过程中踩了很多坑。&lt;/p&gt;
&lt;p&gt;刚这接到折线图这个需求时，脑海中的第一反应是可以通过canvas或SVG实现，最后调研一番决定使用SVG。我们先来看看canvas和SVG各自的使用场景。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SVG" scheme="http://hellowvirgil.github.io/tags/SVG/"/>
    
  </entry>
  
  <entry>
    <title>阿拉丁卡片及SF情景页开发指北</title>
    <link href="http://hellowvirgil.github.io/2017/01/08/%E9%98%BF%E6%8B%89%E4%B8%81%E5%8D%A1%E7%89%87%E5%8F%8ASF%E6%83%85%E6%99%AF%E9%A1%B5%E5%BC%80%E5%8F%91%E6%8C%87%E5%8C%97/"/>
    <id>http://hellowvirgil.github.io/2017/01/08/阿拉丁卡片及SF情景页开发指北/</id>
    <published>2017-01-08T13:10:09.000Z</published>
    <updated>2017-02-07T13:47:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>第一次开发阿拉丁卡片，坑踩得不少，不过好歹是完成了。在开发中遇到很多问题，尤其坑的一个就是文档很多，真的多！洋洋洒洒几十篇文档，全看完了还不一定能上手，导致前期进度很慢，遇到问题去问别人，又回一句文档里有……当时真是杀人的心都有。不过也算有些收获，吃惊于大搜有一套如此完善的开发流程，环环相扣，流程的繁琐则意味着线上的安全。</p>
<p>SF文档汇总 <a href="http://superframe.baidu.com/readme.md" target="_blank" rel="external">http://superframe.baidu.com/readme.md</a></p>
<p>阿拉丁文档汇总 <a href="http://sfe.baidu.com/psdoc.md" target="_blank" rel="external">http://sfe.baidu.com/psdoc.md</a></p>
<a id="more"></a>
<p>整个阿拉丁卡片的开发流程如下：</p>
<ol>
<li>申请各项权限<ul>
<li><a href="http://sfe.baidu.com/aladdin/wise/devdocs/code_permission.md" target="_blank" rel="external">http://sfe.baidu.com/aladdin/wise/devdocs/code_permission.md</a> 权限申请</li>
</ul>
</li>
<li>登录模板开发平台进行开发，开发过程中要遵循UI栅格规范、js开发规范、css规范，class命名规范<ul>
<li><a href="http://sfe.baidu.com/aladdin/tpldev/help.md" target="_blank" rel="external">http://sfe.baidu.com/aladdin/tpldev/help.md</a>  模板平台使用手册</li>
<li><a href="http://sfe.baidu.com/aladdin/new-reading/gaishu.md" target="_blank" rel="external">http://sfe.baidu.com/aladdin/new-reading/gaishu.md</a>  必读文档</li>
<li><a href="http://superframe.baidu.com/readme.md#" target="_blank" rel="external">http://superframe.baidu.com/readme.md#</a>  sf文档</li>
<li><a href="http://pmd.baidu.com/doc/" target="_blank" rel="external">http://pmd.baidu.com/doc/</a> 栅格文档</li>
<li><a href="http://sfe.baidu.com/aladdin/wise/standard/sigma.md" target="_blank" rel="external">http://sfe.baidu.com/aladdin/wise/standard/sigma.md</a>  sigma文档</li>
</ul>
</li>
<li>开发卡片，情景页选择card ，结果页选择aladin-wise，模板开发过程中要使用base模板预置的一些通用函数，各种js吊起也要遵循相应规范</li>
<li>模板开发过程中要确定这个模板使用的数据schema，模板数据在站长平台确定字段名称（即XML格式），并要保证提交生效（需要进行数据校验）<ul>
<li><a href="http://sfe.baidu.com/aladdin/wise/platform/zhanzhangpingtai.md" target="_blank" rel="external">http://sfe.baidu.com/aladdin/wise/platform/zhanzhangpingtai.md</a>  站长平台使用手册</li>
</ul>
</li>
<li>在模板管理平台新建模板，绑定schema及对应的模板，生成模板id<ul>
<li><a href="pm.open.baidu.com:8001" target="_blank" rel="external">pm.open.baidu.com:8001</a> 模板管理平台</li>
</ul>
</li>
<li>模板开发完成后申请调研机器与后端进行联调</li>
<li>配置pd.conf，配置新增的group</li>
<li>绑定资源号和模板<ul>
<li>结果页卡片需要配置aladdin_all.conf，路径为 <strong><em>/home/work/odp/conf/app/search/aladdin_all.conf</em></strong> </li>
<li>情景页卡片需要sfcard_all.conf，路径为 <strong><em>/home/work/odp/conf/app/search/sfcard_all.conf</em></strong> </li>
</ul>
</li>
<li>将模板部署至调研环境<ul>
<li>结果页模板部署路径为 <strong><em>/home/work/odp/template/search/searchaladdin</em></strong></li>
<li>情景页模板部署路径为 <strong><em>/home/work/odp/template/wise/zh-CN/page/card</em></strong></li>
</ul>
</li>
<li>访问调研环境进行测试（情景页url后加上&amp;cb=json会返回对应的json数据，便于调试）</li>
</ol>
<blockquote>
<p>开发过程中有一个要尤其注意的问题，当XML数据为一个元素时，同步返回的数据通过smarty语法is_array判断仍然是一个数组，然而异步接口返回的数据会是一个对象。对于这种情况，不做特殊处理的话页面结构会乱掉。</p>
</blockquote>
<p>我的解决办法是通过能不能直接访问a.b来判断a是不是一个对象，是对象的话就手动创建一个空数组把他塞进去，来确保格式上的统一。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%if $a.b%&#125;&#10;&#123;%$tmpArray = array()%&#125;&#10;&#123;%$tmpArray = $a%&#125;&#10;&#123;%$a = $tamArray%&#125;&#10;&#123;%/if%&#125;</span><br></pre></td></tr></table></figure>
<p>发现另外一个解决方案，更优雅一点</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%if !isset($list[0])%&#125;&#10;   &#123;%$list = [$list]%&#125;&#10;&#123;%/if%&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次开发阿拉丁卡片，坑踩得不少，不过好歹是完成了。在开发中遇到很多问题，尤其坑的一个就是文档很多，真的多！洋洋洒洒几十篇文档，全看完了还不一定能上手，导致前期进度很慢，遇到问题去问别人，又回一句文档里有……当时真是杀人的心都有。不过也算有些收获，吃惊于大搜有一套如此完善的开发流程，环环相扣，流程的繁琐则意味着线上的安全。&lt;/p&gt;
&lt;p&gt;SF文档汇总 &lt;a href=&quot;http://superframe.baidu.com/readme.md&quot;&gt;http://superframe.baidu.com/readme.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;阿拉丁文档汇总 &lt;a href=&quot;http://sfe.baidu.com/psdoc.md&quot;&gt;http://sfe.baidu.com/psdoc.md&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="阿拉丁" scheme="http://hellowvirgil.github.io/tags/%E9%98%BF%E6%8B%89%E4%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>工作感悟</title>
    <link href="http://hellowvirgil.github.io/2016/11/19/%E5%B7%A5%E4%BD%9C%E6%84%9F%E6%82%9F/"/>
    <id>http://hellowvirgil.github.io/2016/11/19/工作感悟/</id>
    <published>2016-11-18T17:38:01.000Z</published>
    <updated>2016-11-18T17:41:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>经过一段时间的工作，就会发现，工作中遇到的主要难题不是一个需求无法实现，而是在于无法高效率的实现，即注意力无法集中。</p>
<blockquote>
<p>注意力不集中又主要体现在：</p>
</blockquote>
<ol>
<li>没有明确的时间规划</li>
<li>在等待的过程中不知所措</li>
<li>不知道如何处理自己的个人规划</li>
</ol>
<a id="more"></a>
<p>像我自己的todo list列了一大堆，但其实完成的很少，尤其是自我驱动的项目，如books to read</p>
<p>所以，越是自我驱动的项目，越是需要给明一个清楚的deadline。</p>
<p>后面再新增一本需要阅读的书籍或启动一个项目都会给一个明确的deadline来确保自己不会因为懒惰而使这个项目一直处于todo状态。</p>
<p>还有一个需要注意的就是，要保持在一些技术社区、开源社区的活跃，希望自己能有一些产出，并在社区能够吸引到关注。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经过一段时间的工作，就会发现，工作中遇到的主要难题不是一个需求无法实现，而是在于无法高效率的实现，即注意力无法集中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意力不集中又主要体现在：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;没有明确的时间规划&lt;/li&gt;
&lt;li&gt;在等待的过程中不知所措&lt;/li&gt;
&lt;li&gt;不知道如何处理自己的个人规划&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://hellowvirgil.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>一个npm上超级好用的Excel解析工具——xlsx</title>
    <link href="http://hellowvirgil.github.io/2016/08/04/%E4%B8%80%E4%B8%AAnpm%E4%B8%8A%E8%B6%85%E7%BA%A7%E5%A5%BD%E7%94%A8%E7%9A%84Excel%E8%A7%A3%E6%9E%90%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94xlsx/"/>
    <id>http://hellowvirgil.github.io/2016/08/04/一个npm上超级好用的Excel解析工具——xlsx/</id>
    <published>2016-08-04T01:58:10.000Z</published>
    <updated>2016-08-05T18:44:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天给大家介绍一个超级好用的Excel解析工具，做Excel解析的初衷是看见PM们辛苦的配置阿拉丁，感到于心不忍。听她们说什么六个人从早上八点配到晚上10点，简直吓尿。这种重复劳动的工作就应该让机器帮忙解决好么。</p>
<p>首先阿拉丁卡片的配置需要按照格式填写XML文件，PM首先将需要填写的信息整理成了Excel，有十几张表…每张表几十个信息要配…再把Excel的信息人工写入XML，令人发指…</p>
<p><img src="http://7xiw1x.com1.z0.glb.clouddn.com/excel.png" alt="Excel"></p>
<a id="more"></a>
<p>于是，我们的目的很明确，找到一个工具解析Excel，得到JSON，拿到JSON数据后再生成XML。</p>
<p>首先在npm上找解析Excel的工具包，有一大堆，功能都大同小异。于是选了一个自己觉得比较好用的，具有API简单、数据结构清晰的特点，就是 xlsx。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> XLSX = <span class="built_in">require</span>(<span class="string">'xlsx'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成时间戳</span></span><br><span class="line"><span class="keyword">var</span> timeStamp = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取Excel</span></span><br><span class="line"><span class="keyword">const</span> workbook = XLSX.readFile(<span class="string">'3.xlsx'</span>);</span><br><span class="line"><span class="comment">// 获取 Excel 中所有表名</span></span><br><span class="line"><span class="keyword">const</span> sheetNames = workbook.SheetNames; <span class="comment">// 返回 ['sheet1', 'sheet2']</span></span><br><span class="line"><span class="comment">// 根据表名获取对应某张表</span></span><br><span class="line"><span class="keyword">const</span> worksheet = workbook.Sheets[sheetNames[<span class="number">0</span>]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> headers = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> data = [];</span><br><span class="line"><span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(worksheet);</span><br><span class="line"></span><br><span class="line">keys</span><br><span class="line">	<span class="comment">// 过滤以 ! 开头的 key</span></span><br><span class="line">	.filter(k =&gt; k[<span class="number">0</span>] !== <span class="string">'!'</span>)</span><br><span class="line">	<span class="comment">// 遍历所有单元格</span></span><br><span class="line">	.forEach(k =&gt; &#123;</span><br><span class="line">	    <span class="comment">// 如 A11 中的 A</span></span><br><span class="line">	    <span class="keyword">let</span> col = k.substring(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">	    <span class="comment">// 如 A11 中的 11</span></span><br><span class="line">	    <span class="keyword">let</span> row = <span class="built_in">parseInt</span>(k.substring(<span class="number">1</span>));</span><br><span class="line">	    <span class="comment">// 当前单元格的值</span></span><br><span class="line">	    <span class="keyword">let</span> value = worksheet[k].v;</span><br><span class="line">	    <span class="comment">// 保存字段名</span></span><br><span class="line">	    <span class="keyword">if</span> (row === <span class="number">1</span>) &#123;</span><br><span class="line">	        headers[col] = value;</span><br><span class="line">	        <span class="keyword">return</span>;</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="comment">// 解析成 JSON</span></span><br><span class="line">	    <span class="keyword">if</span> (!data[row]) &#123;</span><br><span class="line">	        data[row] = &#123;&#125;;</span><br><span class="line">	    &#125;</span><br><span class="line">	    data[row][headers[col]] = value;</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">var</span> year = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">	<span class="keyword">var</span> item = data[i];</span><br><span class="line">	<span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">		<span class="keyword">var</span> array = [];</span><br><span class="line">		array.push(<span class="string">'&lt;tr&gt;'</span>);</span><br><span class="line">		<span class="keyword">if</span> (item[<span class="string">'状元'</span>]) &#123;</span><br><span class="line">			array.push(<span class="string">'\t&lt;col&gt;&lt;info text="'</span> + item[<span class="string">'状元'</span>] + <span class="string">'" /&gt;&lt;/col&gt;'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (item[<span class="string">'姓名'</span>] &amp;&amp; item[<span class="string">'个人主页URL'</span>]) &#123;</span><br><span class="line">			array.push(<span class="string">'\t&lt;col&gt;&lt;info text="'</span> + item[<span class="string">'姓名'</span>] + <span class="string">'" link="'</span> + item[<span class="string">'个人主页URL'</span>] + <span class="string">'" /&gt;&lt;/col&gt;'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (item[<span class="string">'毕业学校'</span>]) &#123;</span><br><span class="line">			array.push(<span class="string">'\t&lt;col&gt;&lt;info text="'</span> + item[<span class="string">'毕业学校'</span>] + <span class="string">'" /&gt;&lt;/col&gt;'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (item[<span class="string">'分数'</span>]) &#123;</span><br><span class="line">			array.push(<span class="string">'\t&lt;col&gt;&lt;info text="'</span> + item[<span class="string">'分数'</span>] + <span class="string">'" /&gt;&lt;/col&gt;'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (item[<span class="string">'状元笔记（命名）'</span>] &amp;&amp; item[<span class="string">'笔记URL'</span>]) &#123;</span><br><span class="line">			array.push(<span class="string">'\t&lt;col&gt;&lt;info text="'</span> + item[<span class="string">'状元笔记（命名）'</span>] + <span class="string">'" link="'</span> + item[<span class="string">'笔记URL'</span>] + <span class="string">'" /&gt;&lt;/col&gt;'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (item[<span class="string">'年份'</span>]) &#123;</span><br><span class="line">			year = item[<span class="string">'年份'</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (year !== <span class="string">''</span>) &#123;</span><br><span class="line">			array.push(<span class="string">'\t&lt;tab&gt;'</span> + year + <span class="string">'年&lt;/tab&gt;'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		array.push(<span class="string">'&lt;/tr&gt;\n'</span>);</span><br><span class="line">		str += array.join(<span class="string">'\n'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fs.writeFile(<span class="string">'test.xml'</span>, str, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!e) &#123;</span><br><span class="line">    	<span class="built_in">console</span>.log(<span class="string">'成功生成XML!耗时'</span> + (<span class="keyword">new</span> <span class="built_in">Date</span>() - timeStamp)/<span class="number">1000</span> + <span class="string">'s'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    	<span class="built_in">console</span>.log(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>直接运行该 JS 文件就会根据读取的Excel生成如下格式的XML</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">col</span>&gt;</span><span class="tag">&lt;<span class="title">info</span> <span class="attribute">text</span>=<span class="value">"湖南文科状元"</span> /&gt;</span><span class="tag">&lt;/<span class="title">col</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">col</span>&gt;</span><span class="tag">&lt;<span class="title">info</span> <span class="attribute">text</span>=<span class="value">"李丹"</span> <span class="attribute">link</span>=<span class="value">"http://wenku.baidu.com/p/%E6%9D%8E%E4%B8%B9_2016"</span> /&gt;</span><span class="tag">&lt;/<span class="title">col</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">col</span>&gt;</span><span class="tag">&lt;<span class="title">info</span> <span class="attribute">text</span>=<span class="value">"湘西永顺一中"</span> /&gt;</span><span class="tag">&lt;/<span class="title">col</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">col</span>&gt;</span><span class="tag">&lt;<span class="title">info</span> <span class="attribute">text</span>=<span class="value">"666"</span> /&gt;</span><span class="tag">&lt;/<span class="title">col</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">col</span>&gt;</span><span class="tag">&lt;<span class="title">info</span> <span class="attribute">text</span>=<span class="value">"语文知识点笔记"</span> <span class="attribute">link</span>=<span class="value">"http://wenku.baidu.com/view/c764a9ca58fb770bf68a551d.html"</span> /&gt;</span><span class="tag">&lt;/<span class="title">col</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">tab</span>&gt;</span>2016年<span class="tag">&lt;/<span class="title">tab</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">col</span>&gt;</span><span class="tag">&lt;<span class="title">info</span> <span class="attribute">text</span>=<span class="value">"河北理科状元"</span> /&gt;</span><span class="tag">&lt;/<span class="title">col</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">col</span>&gt;</span><span class="tag">&lt;<span class="title">info</span> <span class="attribute">text</span>=<span class="value">"孟祥熙"</span> <span class="attribute">link</span>=<span class="value">"http://wenku.baidu.com/p/%E5%AD%9F%E7%A5%A5%E7%86%99_2016?from=wenku"</span> /&gt;</span><span class="tag">&lt;/<span class="title">col</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">col</span>&gt;</span><span class="tag">&lt;<span class="title">info</span> <span class="attribute">text</span>=<span class="value">"衡水中学"</span> /&gt;</span><span class="tag">&lt;/<span class="title">col</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">col</span>&gt;</span><span class="tag">&lt;<span class="title">info</span> <span class="attribute">text</span>=<span class="value">"724"</span> /&gt;</span><span class="tag">&lt;/<span class="title">col</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">col</span>&gt;</span><span class="tag">&lt;<span class="title">info</span> <span class="attribute">text</span>=<span class="value">"生物知识点笔记"</span> <span class="attribute">link</span>=<span class="value">"http://wenku.baidu.com/view/129c74f56bd97f192379e981.html"</span> /&gt;</span><span class="tag">&lt;/<span class="title">col</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">tab</span>&gt;</span>2016年<span class="tag">&lt;/<span class="title">tab</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">col</span>&gt;</span><span class="tag">&lt;<span class="title">info</span> <span class="attribute">text</span>=<span class="value">"河北文科状元"</span> /&gt;</span><span class="tag">&lt;/<span class="title">col</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">col</span>&gt;</span><span class="tag">&lt;<span class="title">info</span> <span class="attribute">text</span>=<span class="value">"袁嘉玮"</span> <span class="attribute">link</span>=<span class="value">"http://wenku.baidu.com/p/%E8%A2%81%E5%98%89%E7%8E%AE2016"</span> /&gt;</span><span class="tag">&lt;/<span class="title">col</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">col</span>&gt;</span><span class="tag">&lt;<span class="title">info</span> <span class="attribute">text</span>=<span class="value">"衡水中学"</span> /&gt;</span><span class="tag">&lt;/<span class="title">col</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">col</span>&gt;</span><span class="tag">&lt;<span class="title">info</span> <span class="attribute">text</span>=<span class="value">"706"</span> /&gt;</span><span class="tag">&lt;/<span class="title">col</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">col</span>&gt;</span><span class="tag">&lt;<span class="title">info</span> <span class="attribute">text</span>=<span class="value">"政治错题集笔记"</span> <span class="attribute">link</span>=<span class="value">"http://wenku.baidu.com/view/3ab7442ad5bbfd0a7856735e.html"</span> /&gt;</span><span class="tag">&lt;/<span class="title">col</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">tab</span>&gt;</span>2016年<span class="tag">&lt;/<span class="title">tab</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>用这个脚本处理一张worksheet的花费时间是0.142s，处理上述有十几张表的Excel花费了0.22s。相比之下，效率相比之前使用人力翻了 6 x 14 x 60 x 60 / 0.22 = 1 374 545 倍！PM 看到这里是不是很想死 : )</p>
<p>然而在将这个脚本用到配置XML之前，它被用来做了另一件事。前段时间需要将百度高考中高三三级知识点数据导入到夜莺系统作为语料，夜莺后台需要导入一份规定格式的 Excel 来生成语料，于是从RD哥哥那拿到这样一份数据。</p>
<p><img src="http://7xiw1x.com1.z0.glb.clouddn.com/knowpoint.png" alt="三级知识点"></p>
<p>将这份数据粘贴到Excel中就变成了一份有格式的Excel文件，接下来，嘿嘿嘿~</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> XLSX = <span class="built_in">require</span>(<span class="string">'xlsx'</span>);</span><br><span class="line"><span class="keyword">var</span> parseQuestion = <span class="built_in">require</span>(<span class="string">'./parseQueSEOstem'</span>);</span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'requesst'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取Excel</span></span><br><span class="line"><span class="keyword">const</span> workbook = XLSX.readFile(<span class="string">'knowledge.xlsx'</span>);</span><br><span class="line"><span class="comment">// 获取 Excel 中所有表名</span></span><br><span class="line"><span class="keyword">const</span> sheetNames = workbook.SheetNames; <span class="comment">// 返回 ['sheet1', 'sheet2']</span></span><br><span class="line"><span class="comment">// 根据表名获取对应某张表</span></span><br><span class="line"><span class="keyword">const</span> worksheet = workbook.Sheets[sheetNames[<span class="number">0</span>]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> headers = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> data = [];</span><br><span class="line"><span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(worksheet);</span><br><span class="line"></span><br><span class="line">keys</span><br><span class="line">	<span class="comment">// 过滤以 ! 开头的 key</span></span><br><span class="line">	.filter(k =&gt; k[<span class="number">0</span>] !== <span class="string">'!'</span>)</span><br><span class="line">	<span class="comment">// 遍历所有单元格</span></span><br><span class="line">	.forEach(k =&gt; &#123;</span><br><span class="line">	    <span class="comment">// 如 A11 中的 A</span></span><br><span class="line">	    <span class="keyword">let</span> col = k.substring(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">	    <span class="comment">// 如 A11 中的 11</span></span><br><span class="line">	    <span class="keyword">let</span> row = <span class="built_in">parseInt</span>(k.substring(<span class="number">1</span>));</span><br><span class="line">	    <span class="comment">// 当前单元格的值</span></span><br><span class="line">	    <span class="keyword">let</span> value = worksheet[k].v;</span><br><span class="line">	    <span class="comment">// 保存字段名</span></span><br><span class="line">	    <span class="keyword">if</span> (row === <span class="number">1</span>) &#123;</span><br><span class="line">	        headers[col] = value;</span><br><span class="line">	        <span class="keyword">return</span>;</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="comment">// 解析成 JSON</span></span><br><span class="line">	    <span class="keyword">if</span> (!data[row]) &#123;</span><br><span class="line">	        data[row] = &#123;&#125;;</span><br><span class="line">	    &#125;</span><br><span class="line">	    data[row][headers[col]] = value;</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _data = [];</span><br><span class="line"><span class="keyword">var</span> queParser = <span class="keyword">new</span> parseQuestion();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">	<span class="keyword">var</span> item = data[i];</span><br><span class="line">	<span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">		<span class="keyword">var</span> bdjson = <span class="string">''</span>;</span><br><span class="line">		<span class="keyword">if</span> (item.info) &#123;</span><br><span class="line">			bdjson = <span class="built_in">JSON</span>.parse(item.info);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (bdjson !== <span class="string">''</span> &amp;&amp; bdjson.kp_info[<span class="number">0</span>].content[<span class="number">0</span>]) &#123;</span><br><span class="line">			<span class="keyword">var</span> knowledge = &#123;&#125;;</span><br><span class="line">			knowledge[<span class="string">'问题'</span>] = bdjson.kp_name_3 + <span class="string">'是什么'</span>;</span><br><span class="line">			<span class="comment">// queParser.parseBdjson(bdjson.kp_info[0].content).then(function (parseData) &#123;</span></span><br><span class="line">			<span class="comment">// 	knowledge['答案'] = parseData;</span></span><br><span class="line">			<span class="comment">// &#125;);</span></span><br><span class="line">			knowledge[<span class="string">'答案'</span>] = queParser.parseQuestemContent(bdjson.kp_info[<span class="number">0</span>].content);</span><br><span class="line">			knowledge[<span class="string">'所属分类'</span>] = <span class="string">'知识点'</span>;</span><br><span class="line">			_data.push(knowledge);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _headers = [<span class="string">'问题'</span>, <span class="string">'答案'</span>, <span class="string">'所属分类'</span>]</span><br><span class="line"><span class="keyword">var</span> new_headers = _headers</span><br><span class="line">                <span class="comment">// 为 _headers 添加对应的单元格位置</span></span><br><span class="line">                .map((v, i) =&gt; <span class="built_in">Object</span>.assign(&#123;&#125;, &#123;v: v, position: <span class="built_in">String</span>.fromCharCode(<span class="number">65</span>+i) + <span class="number">1</span> &#125;))</span><br><span class="line">                <span class="comment">// 转换成 worksheet 需要的结构</span></span><br><span class="line">                .reduce((prev, next) =&gt; <span class="built_in">Object</span>.assign(&#123;&#125;, prev, &#123;[next.position]: &#123;v: next.v&#125;&#125;), &#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> new_data = _data</span><br><span class="line">              <span class="comment">// 匹配 headers 的位置，生成对应的单元格数据</span></span><br><span class="line">              .map((v, i) =&gt; _headers.map((k, j) =&gt; <span class="built_in">Object</span>.assign(&#123;&#125;, &#123; v: v[k], position: <span class="built_in">String</span>.fromCharCode(<span class="number">65</span>+j) + (i+<span class="number">2</span>) &#125;)))</span><br><span class="line">              <span class="comment">// 对刚才的结果进行降维处理（二维数组变成一维数组）</span></span><br><span class="line">              .reduce((prev, next) =&gt; prev.concat(next))</span><br><span class="line">              <span class="comment">// 转换成 worksheet 需要的结构</span></span><br><span class="line">              .reduce((prev, next) =&gt; <span class="built_in">Object</span>.assign(&#123;&#125;, prev, &#123;[next.position]: &#123;v: next.v&#125;&#125;), &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并 headers 和 data</span></span><br><span class="line"><span class="keyword">var</span> output = <span class="built_in">Object</span>.assign(&#123;&#125;, new_headers, new_data);</span><br><span class="line"><span class="comment">// 获取所有单元格的位置</span></span><br><span class="line"><span class="keyword">var</span> outputPos = <span class="built_in">Object</span>.keys(output);</span><br><span class="line"><span class="comment">// 计算出范围</span></span><br><span class="line"><span class="keyword">var</span> ref = outputPos[<span class="number">0</span>] + <span class="string">':'</span> + outputPos[outputPos.length - <span class="number">1</span>];</span><br><span class="line"><span class="comment">// 构建 workbook 对象</span></span><br><span class="line"><span class="keyword">var</span> wb = &#123;</span><br><span class="line">    SheetNames: [<span class="string">'mySheet'</span>],</span><br><span class="line">    Sheets: &#123;</span><br><span class="line">        <span class="string">'mySheet'</span>: <span class="built_in">Object</span>.assign(&#123;&#125;, output, &#123; <span class="string">'!ref'</span>: ref &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出 Excel</span></span><br><span class="line">XLSX.writeFile(wb, <span class="string">'output.xlsx'</span>);</span><br></pre></td></tr></table></figure>
<p>生成如下文件</p>
<p><img src="http://7xiw1x.com1.z0.glb.clouddn.com/knowpoint-excel.png" alt="三级知识点"></p>
<p>这里用到了 writeFile 方法来生成 Excel，传入的第一个参数为 workbook 对象，因此需要对 JSON 格式进行处理，转化为 workbook 对象，第二个参数则是生成的文件名。</p>
<p>关于 xlsx 模块的 API 及实例，大家可以去 npm 上自行查看，传送门 <a href="https://www.npmjs.com/package/xlsx" target="_blank" rel="external">xlsx</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天给大家介绍一个超级好用的Excel解析工具，做Excel解析的初衷是看见PM们辛苦的配置阿拉丁，感到于心不忍。听她们说什么六个人从早上八点配到晚上10点，简直吓尿。这种重复劳动的工作就应该让机器帮忙解决好么。&lt;/p&gt;
&lt;p&gt;首先阿拉丁卡片的配置需要按照格式填写XML文件，PM首先将需要填写的信息整理成了Excel，有十几张表…每张表几十个信息要配…再把Excel的信息人工写入XML，令人发指…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xiw1x.com1.z0.glb.clouddn.com/excel.png&quot; alt=&quot;Excel&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="npm" scheme="http://hellowvirgil.github.io/tags/npm/"/>
    
      <category term="xlsx" scheme="http://hellowvirgil.github.io/tags/xlsx/"/>
    
  </entry>
  
  <entry>
    <title>UC浏览器rem单位不生效bug</title>
    <link href="http://hellowvirgil.github.io/2016/05/03/UC%E6%B5%8F%E8%A7%88%E5%99%A8rem%E5%8D%95%E4%BD%8D%E4%B8%8D%E7%94%9F%E6%95%88bug/"/>
    <id>http://hellowvirgil.github.io/2016/05/03/UC浏览器rem单位不生效bug/</id>
    <published>2016-05-03T13:30:27.000Z</published>
    <updated>2016-07-28T15:58:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>开发一个移动端页面，需要等比例缩放，于是使用了 rem 单位，通过动态改变 html 元素 font-size 属性来实现页面缩放</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">html</span> &#123;</span><br><span class="line">  <span class="comment">//以 100px 为基数设置大小</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8rem</span>; <span class="comment">// 800px</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">14.24rem</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="function">url</span>(<span class="string">"./images/ceyice-bg.png"</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class">.index-title</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">1.46rem</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">4.95rem</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3.9rem</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">4.95rem</span>/<span class="number">2</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="function">url</span>(<span class="string">"./images/index-title.png"</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>html 初始设置为 100px 是为了避免 Chrome 下最小字体为 12px 导致页面错乱的问题</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 动态设置 html 元素 font-size</span><br><span class="line">(function(win) &#123;</span><br><span class="line">	var doc = win.document;</span><br><span class="line">	var docEl = doc.documentElement;</span><br><span class="line">	var tid;</span><br><span class="line">	function refresh<span class="comment">Rem() &#123;</span></span><br><span class="line">		var docW = docEl.getBoundingClientRect().width;</span><br><span class="line">		// html设置字号，<span class="number">800</span> 是原始psd文件的宽，<span class="number">100</span> 是设置的初始 html 字体大小</span><br><span class="line">		docEl.style.fontSize = docW / <span class="number">800</span> * <span class="number">100</span> +'px';</span><br><span class="line">	&#125;</span><br><span class="line">	refresh<span class="comment">Rem();</span></span><br><span class="line">	//横屏时重设 html 的 font-size</span><br><span class="line">	win.addEventListener('resize', function() &#123;</span><br><span class="line">		clearTimeout(tid);</span><br><span class="line">		tid = setTimeout(refresh<span class="comment">Rem, 300);</span></span><br><span class="line">	&#125;, false);</span><br><span class="line">&#125;)(window);</span><br></pre></td></tr></table></figure>
<p>结果偶遇一个超级奇葩的bug，安卓手机上页面不会缩放，iPhone下正常。</p>
<p>于是各种改 viewport ，各种查 rem 兼容性 ，查淘宝flexible 解决方案，各种…</p>
<p>开始以为是安卓手机的原因，最后发现只有 UC 会这样…真是哔了狗</p>
<p>原因是UC浏览器必须在页面加载完成前设置 html 元素的 font-size 属性， rem 单位才会生效，于是只要把上面那段代码放到 head 标签中就好了 ：）</p>
<p>这就是我找了一下午的 bug ，手动再见…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发一个移动端页面，需要等比例缩放，于是使用了 rem 单位，通过动态改变 html 元素 font-size 属性来实现页面缩放&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;html&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//以 100px 为基数设置大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.content&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: relative;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;8rem&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 800px&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;14.24rem&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-image&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;./images/ceyice-bg.png&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-repeat&lt;/span&gt;: no-repeat;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-size&lt;/span&gt;: cover;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;.index-title&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1.46rem&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;4.95rem&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3.9rem&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;margin-left&lt;/span&gt;: -&lt;span class=&quot;number&quot;&gt;4.95rem&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-image&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;./images/index-title.png&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-size&lt;/span&gt;: cover;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="http://hellowvirgil.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>百度高考WAP版开发记录</title>
    <link href="http://hellowvirgil.github.io/2016/03/31/%E7%99%BE%E5%BA%A6%E9%AB%98%E8%80%83WAP%E7%89%88%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://hellowvirgil.github.io/2016/03/31/百度高考WAP版开发记录/</id>
    <published>2016-03-31T08:40:40.000Z</published>
    <updated>2016-07-30T01:34:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://gaokao.baidu.com/tiku" target="_blank" rel="external">百度高考题库WAP版</a></p>
<blockquote>
<p>电脑用户请使用Chrome移动调试模式打开，该路由做了平台判断，PC打开将会自动跳转PC题库</p>
</blockquote>
<p>才入职几天，就接到对我而言来说是一个『大项目』的事情，那就是百度高考题库WAP版。这个项目主要为了熟悉高考这边的一个开发环境及流程，因此并没有采用新的架构方式，依然采用基于yog2 + express的开发方式，只是中途涉及到前端路由转发及nginx的相关配置，幸好这些都在老大 @岳凯璐 的帮助下完成了 :)。<br><a id="more"></a></p>
<p>在开发过程中遇到很多问题，以下是相关问题及解决办法的整理</p>
<h2 id="文理科切换">文理科切换</h2><p>这部分涉及到两个知识点</p>
<ul>
<li>通过CSS3 animation实现双面翻转</li>
<li>文理科切换的动画要求动画结束后再跳转，因此这里要用到动画相关的事件监听，即transitionend,animationstart,animationiteration,animationend</li>
</ul>
<p>实现双面翻转的原理是将两个块重叠在一起，然后将下面的块设置为rotate(180deg)，同时两个块都设置背面不可见<br>backface-visibility: hidden，最后通过js手动控制外层容器rotate(180deg)。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"wl"</span>&gt;</span><br><span class="line">	&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"front"</span>&gt;文科&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">	&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"back"</span>&gt;理科&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.wl</span><span class="class">.hover</span> &#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="function">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class">.wl</span> &#123;</span><br><span class="line">	<span class="attribute">transition</span>: <span class="number">0.6s</span>;</span><br><span class="line">	<span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">64px</span>/<span class="variable">@scale</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">76px</span>/<span class="variable">@scale</span>;</span><br><span class="line">	<span class="attribute">line-height</span>: <span class="number">76px</span>/<span class="variable">@scale</span>;</span><br><span class="line">	<span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class">.front</span>, <span class="class">.back</span> &#123;</span><br><span class="line">	<span class="attribute">backface-visibility</span>: hidden;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">64px</span>/<span class="variable">@scale</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">76px</span>/<span class="variable">@scale</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class">.front</span> &#123;</span><br><span class="line">	<span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class">.back</span> &#123;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="function">rotateY</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".wl"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	$(<span class="string">".wl"</span>).addClass(<span class="string">"hover"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//transition动画结束时触发事件</span></span><br><span class="line">$(<span class="string">".wl"</span>).on(<span class="string">"webkitTransitionEnd"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="comment">// do something</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="定位组件">定位组件</h2><p>定位采取后端通过IP自动定位的方式，于是需要前端缓存这次定位的结果，避免每次都需要定位，我这里采用Express cookieParser中间件在后端读取cookie，再以模板形式写入前端页面的方式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置cookie</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">pid, wl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> currentList = getRecentProvinceIdList();</span><br><span class="line">    currentList.unshift(pid);</span><br><span class="line">    currentList = unique(currentList);</span><br><span class="line">    res.cookie(<span class="string">'rpids'</span>, currentList.slice(<span class="number">0</span>, <span class="number">3</span>).join(<span class="string">'|'</span>), &#123;</span><br><span class="line">        expires: <span class="keyword">new</span> <span class="built_in">Date</span>((+<span class="keyword">new</span> <span class="built_in">Date</span>()) + <span class="number">365</span> * <span class="number">24</span> * <span class="number">3600</span> * <span class="number">1000</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    res.cookie(<span class="string">'wl'</span>, wl, &#123;</span><br><span class="line">        expires: <span class="keyword">new</span> <span class="built_in">Date</span>((+<span class="keyword">new</span> <span class="built_in">Date</span>()) + <span class="number">365</span> * <span class="number">24</span> * <span class="number">3600</span> * <span class="number">1000</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    res.cookie(<span class="string">'pid'</span>, pid, &#123;</span><br><span class="line">        expires: <span class="keyword">new</span> <span class="built_in">Date</span>((+<span class="keyword">new</span> <span class="built_in">Date</span>()) + <span class="number">365</span> * <span class="number">24</span> * <span class="number">3600</span> * <span class="number">1000</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从Cookies中取最近浏览省份</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRecentProvinceIdList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> rpid = req.cookies.rpids, ret = [];</span><br><span class="line">	<span class="keyword">if</span>(rpid)&#123;</span><br><span class="line">		ret = rpid.split(<span class="string">'|'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去重</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> result = [], hash = &#123;&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, elem; (elem = arr[i]) != <span class="literal">null</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!hash[elem]) &#123;</span><br><span class="line">			result.push(elem);</span><br><span class="line">			hash[elem] = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="下拉遮罩层">下拉遮罩层</h2><p>这部分有两个小问题</p>
<ul>
<li>flex-wrap 兼容性</li>
<li>opacity 容器子元素透明问题</li>
</ul>
<p>flex-wrap 兼容性不佳，我想实现的效果是每行占据固定宽度的块，最初想通过flex-wrap换行及flex：1实现，结果效果不理想，最后通过百分比布局及display:inline-block实现，缺点是无法精准控制两边边距。</p>
<p>设置opacity的容器子元素透明的问题是老生常谈（但我老是忘 - -），解决办法也很简单，把元素放到和容器平行就行。</p>
<blockquote>
<p>UC浏览器在线上环境下fixed定位bug</p>
</blockquote>
<p>在此期间遇到的一个最坑的问题就是，安卓版UC在线上环境下js无法触发fixed定位容器子元素的高度变化，至今不知道为什么 - -</p>
<h2 id="上滑隐藏地址栏">上滑隐藏地址栏</h2><blockquote>
<p>主要是利用window.scrollTo(0, 0)方法，控制网页往上滚动地址栏的高度，以达到隐藏地址栏的效果</p>
</blockquote>
<p><strong><em> 需要注意的是，浏览器内容的高度要超过浏览器窗口高度（出现’滚动条’）才有效，所以不足一屏高时需要手动设置页面高度 </em></strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scrollHeight = <span class="built_in">document</span>.documentElement.scrollHeight;</span><br><span class="line"><span class="keyword">var</span> bodyTag = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span>(scrollHeight &lt;= <span class="built_in">document</span>.documentElement.clientHeight) &#123;</span><br><span class="line">	bodyTag.style.height = <span class="built_in">document</span>.documentElement.clientWidth / screen.width * screen.height + <span class="string">'px'</span>;</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>通过特定meta标签实现（但是无法手动控制，只是一进入页面就全屏，而且只有特定浏览器支持）</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- UC强制全屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"full-screen"</span> <span class="attribute">content</span>=<span class="value">"yes"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- QQ强制全屏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"x5-fullscreen"</span> <span class="attribute">content</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- UC应用模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"browsermode"</span> <span class="attribute">content</span>=<span class="value">"application"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- QQ应用模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"x5-page-mode"</span> <span class="attribute">content</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"apple-mobile-web-app-capable"</span> <span class="attribute">content</span>=<span class="value">"yes"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="锚点定位">锚点定位</h2><p>之前的方案是通过a标签锚点实现，但是由于有fixed定位会遮住一部分，所以通过scrollTop实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定位到锚点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetQueryString</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>,<span class="string">"i"</span>);</span><br><span class="line">	<span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);</span><br><span class="line">	<span class="keyword">if</span> (r!=<span class="literal">null</span>) <span class="keyword">return</span> (r[<span class="number">2</span>]);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(GetQueryString(<span class="string">"hash_anchor"</span>))&#123;</span><br><span class="line">		<span class="keyword">var</span> target = $(<span class="string">"#"</span> + GetQueryString(<span class="string">"hash_anchor"</span>));</span><br><span class="line">		<span class="keyword">if</span>(target.length == <span class="number">1</span>)&#123;</span><br><span class="line">			<span class="comment">// 偏移的高度</span></span><br><span class="line">			<span class="keyword">var</span> top = target.offset().top - <span class="number">38</span>;</span><br><span class="line">			<span class="keyword">if</span>(top &gt; <span class="number">0</span>)&#123;</span><br><span class="line">				$(<span class="string">"body"</span>).scrollTop(top);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://gaokao.baidu.com/tiku&quot;&gt;百度高考题库WAP版&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;电脑用户请使用Chrome移动调试模式打开，该路由做了平台判断，PC打开将会自动跳转PC题库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;才入职几天，就接到对我而言来说是一个『大项目』的事情，那就是百度高考题库WAP版。这个项目主要为了熟悉高考这边的一个开发环境及流程，因此并没有采用新的架构方式，依然采用基于yog2 + express的开发方式，只是中途涉及到前端路由转发及nginx的相关配置，幸好这些都在老大 @岳凯璐 的帮助下完成了 :)。&lt;br&gt;
    
    </summary>
    
    
      <category term="项目" scheme="http://hellowvirgil.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>使用自定义事件封装拖拽事件</title>
    <link href="http://hellowvirgil.github.io/2016/01/09/%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E5%B0%81%E8%A3%85%E6%8B%96%E6%8B%BD%E4%BA%8B%E4%BB%B6/"/>
    <id>http://hellowvirgil.github.io/2016/01/09/使用自定义事件封装拖拽事件/</id>
    <published>2016-01-09T06:40:17.000Z</published>
    <updated>2016-07-30T01:29:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先需要用到两个之前定义的工具类，主要是为了兼容IE。这里只用到了其中的 addHandler 和 removeHandler 方法，不使用这个类而用原生的事件注册也是可以的。<br><a id="more"></a><br>EventUtil.js<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">    addHandler: function (element, type, handler) &#123;</span><br><span class="line">        <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">            element.addEventListener(type, handler, <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">element.attachEvent</span>) </span>&#123;</span><br><span class="line">            element.attachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            element[<span class="string">"on"</span> + type] = handler;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    removeHandler: function (element, type, handler) &#123;</span><br><span class="line">        <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">            element.removeEventListener(type, handler, <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">element.attachEvent</span>) </span>&#123;</span><br><span class="line">            element.detachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            element[<span class="string">"on"</span> + type] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getEvent: function (<span class="keyword">event</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">event</span> ? <span class="keyword">event</span> : window.<span class="keyword">event</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    getTarget: function (<span class="keyword">event</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">event</span>.targrt || <span class="keyword">event</span>.srcElement;</span><br><span class="line">    &#125;,</span><br><span class="line">    preventDefault: function (<span class="keyword">event</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">event</span>.preventDefault) &#123;</span><br><span class="line">            <span class="keyword">event</span>.preventDefault();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">event</span>.returnValue = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    stopPropagation: function (<span class="keyword">event</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">event</span>.stopPropagation) &#123;</span><br><span class="line">            <span class="keyword">event</span>.stopPropagation();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">event</span>.cancelable = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getRelatedTarget: function (<span class="keyword">event</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">event</span>.relatedTarget) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">event</span>.relatedTarget;</span><br><span class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params"><span class="keyword">event</span>.toElement</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">event</span>.toElement;</span><br><span class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params"><span class="keyword">event</span>.fromElement</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">event</span>.fromElement;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getButton: function (<span class="keyword">event</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (document.implementation.hasFeature(<span class="string">"MouseEvents"</span>, <span class="string">"2.0"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">event</span>.button;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (<span class="keyword">event</span>.button) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getWheelDelta: function (<span class="keyword">event</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">event</span>.wheelDelta) &#123;</span><br><span class="line">            <span class="keyword">return</span> (client.engine.opera &amp;&amp; client.engine.opera &lt; <span class="number">9.5</span> ? -<span class="keyword">event</span>.wheelDelta : <span class="keyword">event</span>.wheelDelta);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="keyword">event</span>.detail * <span class="number">40</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getCharCode: function (<span class="keyword">event</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">event</span>.charCode == <span class="string">"number"</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">event</span>.charCode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">event</span>.keyCode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>EventTarget.js<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EventTarget</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.handlers = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EventTarget.prototype = &#123;</span><br><span class="line">    <span class="constructor"><span class="keyword">constructor</span>: EventTarget,</span><br><span class="line">    addHandler: function (type, handler) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.handlers[<span class="keyword">type</span>] == <span class="string">"undefined"</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.handlers[<span class="keyword">type</span>] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.handlers[<span class="keyword">type</span>].push(handler);</span><br><span class="line">    &#125;,</span><br><span class="line">    fire: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!event.target) &#123;</span><br><span class="line">            event.target = <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.handlers[event.type] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> handlers = <span class="keyword">this</span>.handlers[event.type];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = handlers.length; i &lt; len; i++) &#123;</span><br><span class="line">                handlers[i](event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    removeHandler: <span class="function"><span class="keyword">function</span> (<span class="params"><span class="keyword">type</span>, handler</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.handlers[event.type] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> handlers = <span class="keyword">this</span>.handlers[event.type];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = handlers.length; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (handlers[i] === handler) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            handlers.splice(i, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>这是一个自定义事件的封装类，定义了事件的 addHandler,fire,removeHandler 方法。</p>
<p>接下来设计一个名为DragDrop的单例<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">var DragDrop = <span class="list">(<span class="keyword">function</span> <span class="list">()</span> &#123;</span><br><span class="line">    var dragdrop = new EventTarget<span class="list">()</span>,</span><br><span class="line">        dragging = null,</span><br><span class="line">        diffX = <span class="number">0</span>,</span><br><span class="line">        diffY = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">    function handleEvent <span class="list">(<span class="keyword">event</span>)</span> &#123;</span><br><span class="line">        event = EventUtil.getEvent<span class="list">(<span class="keyword">event</span>)</span><span class="comment">;</span></span><br><span class="line">        var target = EventUtil.getTarget<span class="list">(<span class="keyword">event</span>)</span><span class="comment">;</span></span><br><span class="line">        switch <span class="list">(<span class="keyword">event</span>.type)</span> &#123;</span><br><span class="line">            case <span class="string">"mousedown"</span>:</span><br><span class="line">                if <span class="list">(<span class="keyword">target</span>.className.indexOf<span class="list">(<span class="string">"draggable"</span>)</span> &gt; <span class="number">-1</span>)</span> &#123;</span><br><span class="line">                    dragging = target<span class="comment">;</span></span><br><span class="line">                    diffX = event.clientX - target.offsetLeft<span class="comment">;</span></span><br><span class="line">                    diffY = event.clientY - target.offsetTop<span class="comment">;</span></span><br><span class="line">                    dragdrop.fire<span class="list">(&#123;</span><br><span class="line">                        type: <span class="string">"dragstart"</span>,</span><br><span class="line">                        target: dragging,</span><br><span class="line">                        x: event.clientX,</span><br><span class="line">                        y: event.clientY</span><br><span class="line">                    &#125;)</span><span class="comment">;</span></span><br><span class="line">                &#125;</span><br><span class="line">                break<span class="comment">;</span></span><br><span class="line">            case <span class="string">"mousemove"</span>:</span><br><span class="line">                if <span class="list">(<span class="keyword">dragging</span> !== null)</span> &#123;</span><br><span class="line">                    dragging.style.left = <span class="list">(<span class="keyword">event</span>.clientX - diffX)</span> + <span class="string">"px"</span><span class="comment">;</span></span><br><span class="line">                    dragging.style.top = <span class="list">(<span class="keyword">event</span>.clientY - diffY)</span> + <span class="string">"px"</span><span class="comment">;</span></span><br><span class="line">                    dragdrop.fire<span class="list">(&#123;</span><br><span class="line">                        type: <span class="string">"drag"</span>,</span><br><span class="line">                        target: dragging,</span><br><span class="line">                        x: event.clientX,</span><br><span class="line">                        y: event.clientY</span><br><span class="line">                    &#125;)</span><span class="comment">;</span></span><br><span class="line">                &#125;</span><br><span class="line">                break<span class="comment">;</span></span><br><span class="line">            case <span class="string">"mouseup"</span>:</span><br><span class="line">                dragdrop.fire<span class="list">(&#123;</span><br><span class="line">                    type: <span class="string">"dragend"</span>,</span><br><span class="line">                    target: dragging,</span><br><span class="line">                    x: event.clientX,</span><br><span class="line">                    y: event.clientY</span><br><span class="line">                &#125;)</span><span class="comment">;</span></span><br><span class="line">                dragging = null<span class="comment">;</span></span><br><span class="line">                break<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dragdrop.enable = function <span class="list">()</span> &#123;</span><br><span class="line">        EventUtil.addHandler<span class="list">(<span class="keyword">document</span>, <span class="string">"mousedown"</span>, handleEvent)</span><span class="comment">;</span></span><br><span class="line">        EventUtil.addHandler<span class="list">(<span class="keyword">document</span>, <span class="string">"mousemove"</span>, handleEvent)</span><span class="comment">;</span></span><br><span class="line">        EventUtil.addHandler<span class="list">(<span class="keyword">document</span>, <span class="string">"mouseup"</span>, handleEvent)</span><span class="comment">;</span></span><br><span class="line">    &#125;<span class="comment">;</span></span><br><span class="line">    dragdrop.disable = function <span class="list">()</span> &#123;</span><br><span class="line">        EventUtil.removeHandler<span class="list">(<span class="keyword">document</span>, <span class="string">"mousedown"</span>, handleEvent)</span><span class="comment">;</span></span><br><span class="line">        EventUtil.removeHandler<span class="list">(<span class="keyword">document</span>, <span class="string">"mousemove"</span>, handleEvent)</span><span class="comment">;</span></span><br><span class="line">        EventUtil.removeHandler<span class="list">(<span class="keyword">document</span>, <span class="string">"mouseup"</span>, handleEvent)</span><span class="comment">;</span></span><br><span class="line">    &#125;<span class="comment">;</span></span><br><span class="line">    return dragdrop<span class="comment">;</span></span><br><span class="line">&#125;)</span><span class="list">()</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>DragDrop 返回一个 EventTarget 类的实例对象，并添加了 enable 和 disable 两个方法用于开启/关闭拖拽事件的监听。</p>
<p><strong><em>使用时给想要拖拽的元素加上『dragable』类名，再调用 DragDrop.enable 方法。</em></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DragDrop.enable();</span><br><span class="line">DragDrop.addHandler(<span class="string">"dragstart"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> status = <span class="built_in">document</span>.getElementById(<span class="string">"status"</span>);</span><br><span class="line">    status.innerHTML = <span class="string">"Started dragging "</span> + event.target.id;</span><br><span class="line">&#125;);</span><br><span class="line">DragDrop.addHandler(<span class="string">"drag"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> status = <span class="built_in">document</span>.getElementById(<span class="string">"status"</span>);</span><br><span class="line">    status.innerHTML = <span class="string">"Dragged "</span> + event.target.id + <span class="string">" to ("</span> + event.x + <span class="string">", "</span> + event.y + <span class="string">")"</span>;</span><br><span class="line">&#125;);</span><br><span class="line">DragDrop.addHandler(<span class="string">"dragend"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> status = <span class="built_in">document</span>.getElementById(<span class="string">"status"</span>);</span><br><span class="line">    status.innerHTML = <span class="string">"Dropped "</span> + event.target.id + <span class="string">" st ("</span> + event.x + <span class="string">", "</span> + event.y + <span class="string">")"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>这样的封装使得拖拽可以更好的复用，不必再对每个拖拽的元素进行处理，省略了大量的逻辑操作，api设计也和原生没有什么区别，非常易用，这样的处理是非常值得的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先需要用到两个之前定义的工具类，主要是为了兼容IE。这里只用到了其中的 addHandler 和 removeHandler 方法，不使用这个类而用原生的事件注册也是可以的。&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://hellowvirgil.github.io/tags/JavaScript/"/>
    
      <category term="事件" scheme="http://hellowvirgil.github.io/tags/%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>JDBC（三）</title>
    <link href="http://hellowvirgil.github.io/2015/12/29/JDBC%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://hellowvirgil.github.io/2015/12/29/JDBC（三）/</id>
    <published>2015-12-29T02:33:17.000Z</published>
    <updated>2016-07-29T17:58:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、事物处理">一、事物处理</h2><p>事物是数据库中保证消息可靠的机制<br>JDBC支持数据库中的事物概念，实际上就是调用数据库的事物</p>
<p><strong><em>满足如下四个特征的数据库访问叫做事物:</em></strong><br><strong><em>原子性（Atomicity）</em></strong>：事物必须是原子工作单元，对于其数据修改，要么全部执行，要么全都不执行<br><strong><em>一致性（Consistency）</em></strong>：事物在完成时，必须使所有的数据都保持一致状态<br><strong><em>隔离性（Isolation）</em></strong>：由并发事物所做的修改必须与任何其它并发事物所做的修改隔离，事物过程中的数据不能被他人访问<br><strong><em>持久性（Durability）</em></strong>：事物完成后，它对于系统的影响是永久性的<br><a id="more"></a><br>在JDBC中，事物默认是自动提交的，使用executeUpdate()时，它会自动调用数据库的COMMIT，也可以设置为手动提交。设置手动提交步骤为：<br>1.关闭自动提交<br>2.手动提交<br>3.手动回退</p>
<p>Connection.getAutoCommit() 获得当前事物的提交方式，默认为true<br>Connection.setAutoCommit() 设置事物的提交属性，参数为true自动提交，false不自动提交<br>Connection.commit() 提交事物<br>Connection.rollback() 回退事物</p>
<h2 id="二、批量更新">二、批量更新</h2><p>批量添加要注意：<br>1.保证事物<br>2.使用PreparedStatement，批量提交数据，通过addBatch和executeBatch，从而减少提交次数<br>3.分批次插入</p>
<p>addBatch() PreparedStatement类的方法，可以将当前设置的参数存入PS<br>executeBatch() 把Statement对象或PreparedStatement存的参数一起提交给DB<br>clearBatch() 清空当前SQL语句列表</p>
<p>ps设置参数时，若设置的方法为setInt/setDouble等，不能传入null，如果一定要设置为null，使用setObject方法。</p>
<p>如果PS对象的SQL列表包含过多待处理的SQL语句，可能会产生OutOfMemory错误，所以要及时处理SQL语句列表</p>
<h2 id="三、返回自动主键">三、返回自动主键</h2><p><strong><em>方法一，先通过序列的nextval获取序列的下一个值，再作为参数插入到主表和从表</em></strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String sql = "<span class="operator"><span class="keyword">select</span> dept_seq.<span class="keyword">nextval</span> <span class="keyword">as</span> <span class="keyword">id</span> <span class="keyword">from</span> dual<span class="string">";</span><br><span class="line">String sql1 = "</span><span class="keyword">insert</span> <span class="keyword">into</span> dept(deptno, <span class="keyword">name</span> ,loc) <span class="keyword">values</span> (?,?,?)<span class="string">";</span><br><span class="line">String sql2 = "</span><span class="keyword">insert</span> <span class="keyword">into</span> emp(empno, ename, deptno) <span class="keyword">values</span> (?,?,?)<span class="string">";</span></span></span><br></pre></td></tr></table></figure></p>
<p>这种方法需要多访问一次数据库，影响性能</p>
<p><strong><em>方法二，利用PS的getGeneratedKeys方法获取自增类型的数据，只要一次SQL交互</em></strong><br>(1)创建ps时传入它需要记录的字段名，通常只要一个id即可<br>(2)在执行完后，调用ps的getGeneratedKeys()获取一个结果集，该结果集中记录的就是第一步中指定那个字段的值<br>(3)该结果集中只有一条数据，直接从结果集中把这条数据读取过来，并获取生成的id值<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String </span>sql1 = <span class="string">"insert into dept(deptno, name ,loc) values (dept_seq.nextval,?,?)"</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">stmt </span>= con.prepareStatement(sql, newString[] &#123;<span class="string">"deptno"</span>&#125;)<span class="comment">;</span></span><br><span class="line"><span class="keyword">stmt.setString(1, </span><span class="string">""</span>)<span class="comment">;</span></span><br><span class="line"><span class="keyword">stmt.setString(2, </span><span class="string">""</span>)<span class="comment">;</span></span><br><span class="line"><span class="keyword">stmt.executeUpdate();</span><br><span class="line"></span><span class="label">rs</span> = <span class="keyword">stmt.getGeneratedKeys();</span><br><span class="line"></span><span class="label">rs.next</span>()<span class="comment">;</span></span><br><span class="line"><span class="label">int</span> deptno = rs.getInt()<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="四、分页查询">四、分页查询</h2><p><strong><em>实现分页查询有两种方式：</em></strong><br>1.真分页（物理分页）<br>使用分页的SQL实现分页<br>每次只向数据库请求一页的数据量<br>内存压力小，适合大数据量数据表<br>2.假分页（缓存/内存分页）<br>不使用分页sql，而是直接查出全部数据，然后使用java在内存中找到当前页的数据<br>只访问数据库一次，第一次取数据比较慢，以后每次都从缓存中获取，比较快<br>比较适合小数据量，如果数据量大，对内存压力大</p>
<p>Oracle实现方式：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int <span class="operator"><span class="keyword">begin</span> = (page - <span class="number">1</span>) * pageSize + <span class="number">1</span>;</span></span><br><span class="line">int <span class="operator"><span class="keyword">end</span> = page * pageSize;</span></span><br><span class="line">String sql = "<span class="operator"><span class="keyword">select</span> * <span class="keyword">from</span> (</span><br><span class="line">     <span class="keyword">select</span> <span class="keyword">e</span>.* ,<span class="keyword">rownum</span> r <span class="keyword">from</span> (</span><br><span class="line">          <span class="keyword">select</span> * <span class="keyword">from</span> amps <span class="keyword">order</span> <span class="keyword">by</span> empno</span><br><span class="line">     ) <span class="keyword">e</span></span><br><span class="line">) <span class="keyword">where</span> r <span class="keyword">between</span> ? <span class="keyword">and</span> ?<span class="string">"；</span><br><span class="line">stmt = conn.preparedStatement(sql);</span><br><span class="line">stmt.setInt(1,begin);</span><br><span class="line">stmt.setInt(2,end);</span><br><span class="line">rs = stmt.executeQuery();</span></span></span><br></pre></td></tr></table></figure></p>
<p>MySQL实现方式：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">t</span> <span class="keyword">limit</span> <span class="keyword">begin</span>,pageSize</span></span><br></pre></td></tr></table></figure></p>
<h2 id="五、DAO">五、DAO</h2><p>DAO Data Access Object 数据访问对象<br>目的：数据访问逻辑和业务逻辑分开</p>
<p><strong><em>DAO通常包括：</em></strong><br>1.一个DAO工厂类<br>2.一个DAO接口<br>3.一个实现DAO接口的具体类</p>
<p>表和类对应<br>表中的字段和类的属性对应<br>记录和对象对应</p>
<p><strong><em>实体对象规范：</em></strong><br>1.通常实体类和表名一致<br>2.首字母大写<br>3.实现序列化接口<br>1）可以将对象保存在硬盘上<br>2）可以将对象在网络上传输<br>4.要有公有的get/set方法<br>5.通常都使用封装类型，以支持null</p>
<p><strong><em>DAO类规范：</em></strong><br>1.命名通常以表名开头，Dao结尾<br>2.通常一个表对应一个Dao，且该Dao下写这个表的增删改查方法</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、事物处理&quot;&gt;一、事物处理&lt;/h2&gt;&lt;p&gt;事物是数据库中保证消息可靠的机制&lt;br&gt;JDBC支持数据库中的事物概念，实际上就是调用数据库的事物&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;满足如下四个特征的数据库访问叫做事物:&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;em&gt;原子性（Atomicity）&lt;/em&gt;&lt;/strong&gt;：事物必须是原子工作单元，对于其数据修改，要么全部执行，要么全都不执行&lt;br&gt;&lt;strong&gt;&lt;em&gt;一致性（Consistency）&lt;/em&gt;&lt;/strong&gt;：事物在完成时，必须使所有的数据都保持一致状态&lt;br&gt;&lt;strong&gt;&lt;em&gt;隔离性（Isolation）&lt;/em&gt;&lt;/strong&gt;：由并发事物所做的修改必须与任何其它并发事物所做的修改隔离，事物过程中的数据不能被他人访问&lt;br&gt;&lt;strong&gt;&lt;em&gt;持久性（Durability）&lt;/em&gt;&lt;/strong&gt;：事物完成后，它对于系统的影响是永久性的&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://hellowvirgil.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JDBC（二）</title>
    <link href="http://hellowvirgil.github.io/2015/12/28/JDBC%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://hellowvirgil.github.io/2015/12/28/JDBC（二）/</id>
    <published>2015-12-28T00:58:16.000Z</published>
    <updated>2016-07-30T01:25:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、PreparedStatement">一、PreparedStatement</h2><p>PreparedStatement原理</p>
<ul>
<li>Statement主要用于执行静态SQL语句，即内容固定不变的SQL语句</li>
<li>Statement每执行一次都要对传入的SQL语句编译一次，效率较差</li>
<li>某些情况下，SQL语句只是其中的参数有所不同，其余子句完全相同，适用于PreparedStatement</li>
<li>预防SQL注入攻击<a id="more"></a>
<strong><em>PreparedStatement 接口继承自Statement，execute、executeQuery、executeUpdate方法已重写，不再需要参数。PreparedStatement实例包含已事先编译的SQL语句，SQL语句的IN参数使用『？』占位。</em></strong></li>
</ul>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PreparedStatement</span> <span class="type">stmt</span> = conn.prepareStatement(<span class="string">"UPDATE amp SET job = ? WHERE empno = ?"</span>);</span><br><span class="line"><span class="type">stmt</span>.setLong(<span class="number">1</span>,<span class="string">"Manger"</span>);</span><br><span class="line"><span class="type">stmt</span>.setInt(<span class="number">2</span>,<span class="number">1001</span>);</span><br><span class="line"><span class="type">stmt</span>.executeUpdate();</span><br></pre></td></tr></table></figure>
<p>由于数据库具有缓存功能，可以对statement的执行计划进行缓存，以免重复解析。但是如果每次执行SQL，条件都不同，则DB每次都会创建新计划，缓存并没有起到作用，但是PrepareStatement每次执行内容都用占位符占位，所以PrepareStatement可以利用缓存，提升性能。</p>
<p>SQL Injection只对Statement有效，对PreparedStatement无效，因为PreparedStatement不允许在插入参数时改变SQL语句的逻辑结构</p>
<h2 id="二、ResultSetMetaData">二、ResultSetMetaData</h2><p>ResultSetMetaData 数据结果集的元数据，对结果集进行描述的数据，只有返回ResulSet时才有这个元数据<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ResultSetMetaData rsm = rs.getMetaData()<span class="comment">;</span></span><br><span class="line"><span class="built_in">int</span> columnCount = rsm.getColumnCount()<span class="comment">;</span></span><br><span class="line"><span class="built_in">String</span> columnName = <span class="literal">null</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span><span class="comment">;i &lt;= columnCount;i++) &#123;</span></span><br><span class="line">     columnName = rsm.getColumnName(i)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="三、可滚动的结果集">三、可滚动的结果集</h2><p>创建可滚动的结果集<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Statement</span> stmt = conn.createStatement(<span class="typedef"><span class="keyword">type</span>,concurrency);</span></span><br></pre></td></tr></table></figure></p>
<p>或<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PreparedStatement</span> stmt = conn.prepareStatement(sql,<span class="typedef"><span class="keyword">type</span>,concurrency);</span></span><br></pre></td></tr></table></figure></p>
<p>type取值</p>
<ul>
<li>TYPE_FORARD_ONLY 只能向前移动，默认参数</li>
<li>TYPE_SCROLL_INSENSITIVE 可滚动，不感知数据变化</li>
<li>TYPE_SCROLL_SENSITIVE 可滚动，感知数据变化</li>
</ul>
<p>concurrency取值</p>
<ul>
<li>CONCUR_READ_ONLY 只读</li>
<li>CONCUR_UPDATABLE 可更新</li>
</ul>
<p>可滚动集的常用方法</p>
<ul>
<li>first</li>
<li>last</li>
<li>beforeFirst</li>
<li>afterLast</li>
<li>isFirst</li>
<li>isLast</li>
<li>isBeforeFirst</li>
<li>isAfterLast</li>
<li>relative</li>
<li>next</li>
<li>previous</li>
<li>absolute</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、PreparedStatement&quot;&gt;一、PreparedStatement&lt;/h2&gt;&lt;p&gt;PreparedStatement原理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Statement主要用于执行静态SQL语句，即内容固定不变的SQL语句&lt;/li&gt;
&lt;li&gt;Statement每执行一次都要对传入的SQL语句编译一次，效率较差&lt;/li&gt;
&lt;li&gt;某些情况下，SQL语句只是其中的参数有所不同，其余子句完全相同，适用于PreparedStatement&lt;/li&gt;
&lt;li&gt;预防SQL注入攻击
    
    </summary>
    
    
      <category term="Java" scheme="http://hellowvirgil.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JDBC（一）</title>
    <link href="http://hellowvirgil.github.io/2015/12/24/JDBC%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://hellowvirgil.github.io/2015/12/24/JDBC（一）/</id>
    <published>2015-12-24T01:28:18.000Z</published>
    <updated>2016-07-30T01:36:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、JDBC标准">一、JDBC标准</h2><blockquote>
<p>什么是JDBC？</p>
</blockquote>
<p>JDBC（Java Database Connectivity），Java访问数据库的解决方案。</p>
<p>JDBC分为两部分：<br>A.接口(1) 由SUN公司统一提出<br>B.实现类(n) 也叫驱动，由数据库厂商实现<br>注意：</p>
<ul>
<li>只需要学习一套接口</li>
<li>使用时要导入相应的驱动<a id="more"></a>
</li>
</ul>
<p><strong><em>JDBC工作过程：</em></strong></p>
<ul>
<li><p>加载驱动</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//执行这个类的静态块，而该类的静态块中自行实现了注册的功能</span></span><br><span class="line"><span class="keyword">Class</span>.forName(<span class="string">"oracle.jdbc.OracleDriver"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立连接</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">Connection</span> conn = DriverManager.getConnection(<span class="string">"url"</span>,<span class="string">"uesername"</span>,<span class="string">"password"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建语句对象</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">Statement</span> <span class="keyword">stmt </span>= conn.createStatement()<span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>执行SQL语句</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> sql = <span class="string">"xxxxx"</span>;</span><br><span class="line"><span class="built_in">boolean</span> flag = stmt<span class="built_in">.</span>execute(sql);	<span class="comment">//能够执行所有SQL，通常发送DDL语句</span></span><br><span class="line"><span class="keyword">ResultSet</span> rs = stmt<span class="built_in">.</span>executeQuery(sql);	<span class="comment">//通常发送DQL语句</span></span><br><span class="line">int flag = stmt<span class="built_in">.</span>executeUpdate(sql);	<span class="comment">//通常发送DML语句</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果执行查询，处理结果集<br>查询的结果放在ResultSet对象的一系列行中<br>ResultSet对象的最初位置在行首</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">ResultSet</span>.<span class="keyword">next</span>();	<span class="regexp">//</span>用来在行间移动，返回<span class="literal">true</span>表示有记录，<span class="literal">false</span>表示无记录</span><br><span class="line"><span class="constant">ResultSet</span>.getXXX();	<span class="regexp">//</span>方法用来取得字段的内容</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭连接</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">stmt</span><span class="class">.close</span>();</span><br><span class="line"><span class="tag">conn</span><span class="class">.close</span>();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="二、数据库厂商实现">二、数据库厂商实现</h2><p>Oracle，MySQL等</p>
<h2 id="三、连接管理">三、连接管理</h2><p>通过连接工具类获取连接：编写一个访问数据库的工具类，此后所以访问数据库的操作都从工具类中获取连接</p>
<p><strong><em>数据配置有两种方式：</em></strong></p>
<ul>
<li>直接把数据配置写在工具类中</li>
<li>把数据库配置写在一个properties属性文件里，工具类读取属性文件，逐行获取数据库参数</li>
</ul>
<p>建议采用第二种方式</p>
<p><strong><em>db.properties 属性文件,将配置保存为db.properties</em></strong><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">driverClass=<span class="value">com.oracle.driver.OracleDriver</span></span></span><br><span class="line"><span class="setting">url=<span class="value">xxxx</span></span></span><br><span class="line"><span class="setting">username=<span class="value">xxx</span></span></span><br><span class="line"><span class="setting">password=<span class="value">xxx</span></span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>加载连接信息</em></strong><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态块在加载类时执行一次</span></span><br><span class="line">static &#123;</span><br><span class="line">     <span class="comment">//Properties是一个特殊的散列表（key和value都是String），读取速度快</span></span><br><span class="line">     Properties <span class="keyword">prop</span> = new Properties();</span><br><span class="line">     <span class="comment">//使用ClassLoader读取类路径（classpath/src）下的文件，得到一个输入流</span></span><br><span class="line">     InputStream inStream = DBUtil.<span class="keyword">class</span>.getClassLoader().getResourceAsStream(<span class="string">"db.properties"</span>);</span><br><span class="line">     try &#123;</span><br><span class="line">    	<span class="comment">//从流中读取数据</span></span><br><span class="line">     	<span class="keyword">prop</span>.load(inStream);</span><br><span class="line">     	driverClass = <span class="keyword">prop</span>.getProperty(<span class="string">"driverClass"</span>);</span><br><span class="line">     	url = <span class="keyword">prop</span>.getProperty(<span class="string">"url"</span>);</span><br><span class="line">     	username = <span class="keyword">prop</span>.getProperty(<span class="string">"username"</span>);</span><br><span class="line">     	password = <span class="keyword">prop</span>.getProperty(<span class="string">"password"</span>);</span><br><span class="line">     	<span class="comment">//加载驱动</span></span><br><span class="line">     	<span class="keyword">Class</span>.forName(driverClass);</span><br><span class="line">     &#125; catch(<span class="keyword">e</span>) &#123;</span><br><span class="line">      	<span class="keyword">e</span>.printException();</span><br><span class="line">      	throw new RuntimeException();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong><em>设计方法的思路：</em></strong><br>1.返回值类型<br>确定是否有运算结果，确定结果的类型<br>2.方法的参数列表<br>运算中是否有未知的数据参与</p>
<p><strong><em>openConn() 方法</em></strong><br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">Connection <span class="title">openConn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     Connection conn = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         conn = DriverManager.getConnection(url, username, password);</span><br><span class="line">     &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">          e.printException();</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong><em>closeConn() 方法</em></strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static void closeConn(Connection conn) &#123;&#10;     if(conn != null) &#123;&#10;          try &#123;&#10;              conn.close();&#10;          &#125; catch(e) &#123;&#10;               e.printException();&#10;          &#125;&#10;     &#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong><em>JUnit测试类，需要导入Unit.jar</em></strong><br>JUnit测试方法有如下要求，才能直接执行：<br>1.public<br>2.无返回值<br>3.无参数<br>4.方法前加@Test</p>
<p>通过// TODO xxxx 记录待办事项，可以在Tasks中查看<br><br></p>
<h2 id="四、连接池技术">四、连接池技术</h2><p>使用DriverManager创建连接，适合在单线程场景下使用。多线程时，即多人访问数据库时，DriverManager并没有加以限制，一旦访问的人数超过上限，则数据库瘫痪，由此产生一个解决方案：数据库连接池。连接池可以帮助我们管理多线程下的连接，避免数据库瘫痪。</p>
<p><strong><em>连接池中连接的释放与使用原则：</em></strong></p>
<ul>
<li>应用启动时，创建初始化数目的连接</li>
<li>当申请时无连接可用或者达到指定的最小连接数，按增量参数值创建新的连接</li>
<li>动态检查：定时检查连接池，一旦发现数量小于最小连接数，则补充相应的新连接，保证连接池正常运转</li>
<li>静态检查：空闲连接不足时，系统才检测是否达到最小连接数</li>
<li>按需分配，用过归还，空闲超时释放，获取超时报错</li>
</ul>
<p>连接池也只是接口，具体实现由厂商完成</p>
<p><strong><em>常用的连接池：</em></strong></p>
<ul>
<li>Apache DBCP连接池，Tomcat使用的连接池组件</li>
<li>C3P0<br>连接池都实现了DataSource接口，不同的连接池实现类不同，设置的参数名不同，但是不同连接池的方法是相同的。</li>
</ul>
<p><strong><em>通过DataSource获取连接</em></strong><br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private BasicDataSource dataSource = new BasicDataSource()<span class="comment">;</span></span><br><span class="line">dataSource.setDriverClassName(driverClass)<span class="comment">;</span></span><br><span class="line">dataSource.setUrl(url)<span class="comment">;</span></span><br><span class="line">dataSource.setUsername(username)<span class="comment">;</span></span><br><span class="line">dataSource.setPassword(password)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>常用参数有</p>
<ul>
<li>初始连接数</li>
<li>最大连接数</li>
<li>最小连接数</li>
<li>每次增加的连接数</li>
<li>超时时间</li>
<li>最大空闲连接</li>
<li>最小空闲连接</li>
</ul>
<p><strong><em>若连接由连接池创建，则关闭连接就是将其归还给连接池，该连接的状态会变成空闲，可以继续复用。<br>连接池创建的连接不是原始的连接，而是它重新封装后的连接。典型的特征就是其执行关闭方法后是归还连接。</em></strong></p>
<h2 id="五、异常处理">五、异常处理</h2><p><strong><em>异常的处理方式：</em></strong><br>1.记录异常日志，便于分析解决问题<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">e</span><span class="class">.printStackTrace</span>();</span><br></pre></td></tr></table></figure></p>
<p>2.能处理则处理，如返回默认值等<br>3.解决不了时抛出给调用者处理<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">""</span>,  e);</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、JDBC标准&quot;&gt;一、JDBC标准&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;什么是JDBC？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JDBC（Java Database Connectivity），Java访问数据库的解决方案。&lt;/p&gt;
&lt;p&gt;JDBC分为两部分：&lt;br&gt;A.接口(1) 由SUN公司统一提出&lt;br&gt;B.实现类(n) 也叫驱动，由数据库厂商实现&lt;br&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只需要学习一套接口&lt;/li&gt;
&lt;li&gt;使用时要导入相应的驱动
    
    </summary>
    
    
      <category term="Java" scheme="http://hellowvirgil.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>数据库基础（五）</title>
    <link href="http://hellowvirgil.github.io/2015/12/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <id>http://hellowvirgil.github.io/2015/12/22/数据库基础（五）/</id>
    <published>2015-12-22T00:21:13.000Z</published>
    <updated>2016-07-30T01:43:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、视图">一、视图</h2><p>视图也被称为虚表，是一组数据的逻辑表示，视图在SQL语句汇总跳线的样子与表一致，但不是表，只是对应于一条SELECT语句的查询结果集，结果集被赋予一个名字，通常前面加上_v<br>必须有权限才能创建视图，管理员可以通过<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">GRANT</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> <span class="keyword">TO</span> user_name</span></span><br></pre></td></tr></table></figure></p>
<p>授予用户创建视图的权限<br><a id="more"></a></p>
<p>创建视图：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v_emp_10</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> empno,<span class="keyword">name</span>,sal,deptno</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> deptno = <span class="number">10</span>;</span></span><br></pre></td></tr></table></figure></p>
<p>创建或替换视图：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> v_emp_10</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> empno <span class="keyword">id</span>,ename <span class="keyword">name</span>,sal salary,deptno</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> deptno = <span class="number">10</span>;</span></span><br></pre></td></tr></table></figure></p>
<p>查看视图中的数据：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v_emp_10</span><br></pre></td></tr></table></figure></p>
<p>视图中对应的查询语句的字段可以添加别名，这样视图中该字段就是用别名作为字段名,当视图的查询语句的字段含有函数或者表达式时，该字段必须使用别名。</p>
<p><strong><em>根据视图所对应的子查询分类分为几种类型：</em></strong></p>
<ul>
<li>简单视图，基于单表建立，且不包含任何函数运算、表达式或分组函数</li>
<li>复杂视图，基于单表建立的，但包含函数、表达式等；基于多个表叫做连接视图，属于复杂视图的一种</li>
</ul>
<p><strong><em>视图的作用：</em></strong></p>
<ul>
<li>简化复杂查询</li>
<li>限制数据访问</li>
</ul>
<p><strong><em>对视图进行DML操作，实际上是对视图数据来源的基表进行操作</em></strong></p>
<ul>
<li>简单视图能够执行DML操作，但当在基表中定义了非空列，而简单视图对应的SELECT<br>语句并没有包含这个非空列，导致这个非空列对视图不可见时，无法对视图执行INSERT操作</li>
<li>如果视图定义中包含了函数、表达式、分组语句、DISTINCT关键字或ROWNUN伪列，不允许进行DML操作</li>
<li>DML操作不能违反基表的约束条件，视图看不到的字段全部插入默认值</li>
</ul>
<p>通过视图插入一条视图看不到的数据，会对基表产生”污染”<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">INSERT v_emp_10 <span class="title">VALUES</span><span class="params">(<span class="number">2012</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="number">78.5</span>)</span></span></span><br></pre></td></tr></table></figure></p>
<p>修改也可能对视图产生”污染”<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">UPDATE</span> v_emp_10 <span class="keyword">SET</span> year_id=<span class="number">2011</span> <span class="keyword">WHERE</span> month_id=<span class="number">11</span> <span class="keyword">AND</span> day_id=<span class="number">8</span></span></span><br></pre></td></tr></table></figure></p>
<p>删除只能对视图看得到的数据进行，不会产生”污染”<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> v_emp_10 <span class="keyword">WHERE</span> deptno=<span class="number">20</span></span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>添加WITH CHECK OPTION后，视图可以对进行DML操作的数据进行检查，确保插入的数据必须视图可见，修改的数据必须保证修改后视图对其仍然可见才可以操作，避免对基表产生”污染”。</em></strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> v_emp_10</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> empno <span class="keyword">id</span>,ename <span class="keyword">name</span>,sal salary,deptno</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> deptno = <span class="number">10</span></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">CHECK</span> <span class="keyword">OPTION</span>;</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>添加WITH READ ONLY后，视图不允许DML操作</em></strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> v_emp_10</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> empno <span class="keyword">id</span>,ename <span class="keyword">name</span>,sal salary,deptno</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> deptno = <span class="number">10</span></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">READ</span> <span class="keyword">ONLY</span>;</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>和视图相关的数据字典：</em></strong></p>
<ul>
<li><p>USER_OBJECTS 记录所有创建的数据库对象</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> object_name <span class="keyword">FROM</span> user_objects <span class="keyword">WHERE</span> object_type = ‘<span class="keyword">VIEW</span><span class="string">'</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>USER_VIEWS 记录所有创建过的视图</p>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">text</span> <span class="keyword">FROM</span> user_views <span class="keyword">WHERE</span> view_name = ‘v_emp_10<span class="comment">'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>USER_TABLES 记录所有创建过的表</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> table_name <span class="keyword">FROM</span> user_tables</span><br></pre></td></tr></table></figure>
</li>
<li><p>USER_UPDATE_COLUMNS 记录所有的列</p>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name,insertable,updatable,deletable</span><br><span class="line"><span class="keyword">FROM</span> user_update_columns</span><br><span class="line"><span class="keyword">WHERE</span> table_name = ‘v_emp_10<span class="comment">'</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>删除视图不会导致基表数据的丢失，不会影响基表数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> view_name</span></span><br></pre></td></tr></table></figure></p>
<h2 id="二、序列">二、序列</h2><p>序列是一个数据库对象，可以根据指定的步进方式提供一组数字。通常使用序列生成数字的目的是为了数据库某张表的主键提供值使用。通常情况下，一个序列为一个表提供主键值，但一个序列也可以为多个表提供主键值<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">SEQUENCE</span> seq_emp_empno</span><br><span class="line"><span class="keyword">START</span> <span class="keyword">WITH</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">INCREMENT</span> <span class="keyword">BY</span> <span class="number">10</span>;</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>序列提供了两个伪列，用于序列获取对应的数字：</em></strong></p>
<ul>
<li>NEXTVAL：获取序列下一个数字<br>第一次使用序列时，改伪列获取的是START WITH指定的数字，之后则是用当前数字加上步长得到的。</li>
<li>CURRVAL：获取序列当前数字<br>CURRVAL 必须在序列创建后，至少使用NEXTVAL生成过一个数字后才可以使用</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> seq_emp_empno.<span class="keyword">NEXTVAL</span> <span class="keyword">FROM</span> dual</span><br><span class="line"><span class="keyword">SELECT</span> seq_emp_empno.CURRVAL <span class="keyword">FROM</span> dual</span></span><br></pre></td></tr></table></figure>
<p>使用序列生成数字作为主键的值<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp</span><br><span class="line">(empno,<span class="keyword">name</span>,sal,job,deptno)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(seq_emp_empno.<span class="keyword">NEXTVAL</span>,’JACKSON’,<span class="number">5000</span>,’CLERK’,<span class="number">30</span>)</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>UUID也是作为主键生成方式的一种，UUID是一个不重复的32位字符串</em></strong></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT <span class="function"><span class="title">SYS_GUID</span><span class="params">()</span></span> FROM dual</span><br></pre></td></tr></table></figure>
<h2 id="三、索引">三、索引</h2><p>索引是一种允许直接访问数据表中某一数据行的树形结构，为了提高查询效率、排序效率、分组效率而引入，是独立于表的对象，可以存放在与表不同的表空间中</p>
<p>索引会被自动套用，索引也是数据库自行维护的，我们唯一需要关心的就是是否添加索引<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span>] <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> <span class="keyword">table</span>(<span class="keyword">column</span>[,<span class="keyword">column</span>...])</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>index_name 表示索引名称</li>
<li>table 表示表名</li>
<li>column 表示表名，可以建立单列索引或复合索引</li>
<li>UNIQUE 表示唯一索引</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> idx_emp_ename <span class="keyword">ON</span> emp(ename);</span></span><br><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> idx_emp_job_sal <span class="keyword">ON</span> emp(job,sal);</span></span><br><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> idx_emp_ename <span class="keyword">ON</span> emp(<span class="keyword">UPPER</span>(<span class="keyword">name</span>));</span></span><br></pre></td></tr></table></figure>
<p><strong><em>如果经常在索引列上执行DML操作，需要定期重建索引，提高索引的空间利用率</em></strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">INDEX</span> idx_emp_ename <span class="keyword">REBUILD</span></span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>当表上有一个不合理的索引时，会导致操作性能下降，这时需要删除索引</em></strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> idx_emp_ename</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>合理使用索引提升查询效率</em></strong></p>
<ul>
<li>为经常出现在WHERE子句中的列创建索引</li>
<li>为经常出现在ORDER BY、DISTINCT后面的字段建立索引。如果建立的是复合索引，索引的字段顺序要和这些关键字后面的字段顺序一致</li>
<li>为经常作为表的连接条件的列上创建索引</li>
<li>不要在经常做DML操作的表上建立索引</li>
<li>不要在小表上建立索引</li>
<li>限制表上的索引数目，索引并不是越多越好</li>
<li>删除很少使用的、不合理的索引</li>
</ul>
<h2 id="四、约束">四、约束</h2><p>约束是在数据表上强制执行的一些数据校验规则，当执行DML操作时，数据必须符合这些规则，否则不能执行</p>
<p><strong><em>约束条件包括：</em></strong></p>
<ul>
<li>非空约束（NOT Null）,简称NN</li>
<li>唯一性约束（Unique），简称UK</li>
<li>主键约束（Primary Key），简称PK</li>
<li>外键约束（Foreign Key），简称FK</li>
<li>检查约束（Check），简称CK<br><br></li>
</ul>
<p><strong><em>(1)非空约束</em></strong><br>建表时添加非空约束<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp (</span><br><span class="line">eid <span class="built_in">NUMBER</span>(<span class="number">6</span>),</span><br><span class="line"><span class="keyword">name</span> VARCHAR2(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>，</span><br><span class="line">email VARCHAR2(<span class="number">50</span>),</span><br><span class="line">hiredate <span class="built_in">DATE</span> <span class="keyword">CONSTRAINT</span> emp_hiredate_nn <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">)</span></span><br></pre></td></tr></table></figure></p>
<p>建表后添加非空约束<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">ALTER</span> amp <span class="keyword">MODIFY</span> (did <span class="built_in">NUMBER</span>(<span class="number">6</span>) <span class="keyword">not</span> <span class="literal">null</span>);</span></span><br></pre></td></tr></table></figure></p>
<p>取消非空约束<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">ALTER</span> amp <span class="keyword">MODIFY</span> (did <span class="built_in">NUMBER</span>(<span class="number">6</span>) <span class="literal">null</span>);</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>(2)唯一性约束</em></strong><br>唯一性约束用于保证字段或者字段的组合不出现重复值<br>当给表的某个值定义了唯一约束条件，该列的值不允许重复，但允许是NULL值</p>
<p>建表时添加唯一性约束<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE emp (</span><br><span class="line">eid <span class="function"><span class="title">NUMBER</span><span class="params">(<span class="number">6</span>)</span></span> UNIQUE,</span><br><span class="line">name <span class="function"><span class="title">VARCHAR2</span><span class="params">(<span class="number">30</span>)</span></span>，</span><br><span class="line">email <span class="function"><span class="title">VARCHAR2</span><span class="params">(<span class="number">50</span>)</span></span>,</span><br><span class="line">CONSTRAINT emp_email_uk <span class="function"><span class="title">UNIQUE</span><span class="params">(email)</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>建表后添加唯一性约束，只有列中没有重复值时才能成功<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> emp_name_uk <span class="keyword">UNIQUE</span>(<span class="keyword">name</span>);</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>(3)主键约束</em></strong><br>主键约束条件从功能上看相当于非空且唯一的组合<br>一张表只允许简历一个主键，而其它约束则没有明确的个数限制</p>
<p>主键选取的条件：</p>
<ul>
<li>主键应市对系统无意义的数据</li>
<li>永远也不要更新主键，让那个之间除了唯一标识一行外，再无其他用途</li>
<li>主键不应该包含动态变化的数据，如时间戳</li>
<li>主键应自动生成，不要认为干预，以免使它带有除了巍亿标识一行以外的意义</li>
<li>主键尽量建立在单列上</li>
</ul>
<p>建表时添加主键约束<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE emp (</span><br><span class="line">eid <span class="function"><span class="title">NUMBER</span><span class="params">(<span class="number">6</span>)</span></span> PRIMARY KEY,</span><br><span class="line">name <span class="function"><span class="title">VARCHAR2</span><span class="params">(<span class="number">30</span>)</span></span>，</span><br><span class="line">email <span class="function"><span class="title">VARCHAR2</span><span class="params">(<span class="number">50</span>)</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<p>建表后创建主键约束<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> emp_eid_pk PRIMARY <span class="keyword">KEY</span> (eid);</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>(4)外键约束</em></strong><br>外键约束定义在两个表的字段或一个表的两个字段上，用于保证相关两个字段的关系<br>一张表保存的是另一张表主键的值</p>
<p>外键约束包括两个方面的数据约束：</p>
<ul>
<li>从表上的外键的列值，必须从主表被参照的列值中选取，或者为NULL</li>
<li>当主表参照列的值被从表参照时，主表的该行记录不允许被删除</li>
</ul>
<p>外键约束对性能的降低</p>
<ul>
<li>每次DML操作豆浆导致数据库自动对外键所关联的对应表做检查，会产生开销</li>
<li>外键确定了主从表的先后生成关系，有时会影响业务逻辑</li>
</ul>
<p>关联不一定需要外键约束</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> emp_deptno_fk</span><br><span class="line">FOREIGN <span class="keyword">KEY</span>(deptno) <span class="keyword">REFERENCES</span> dept(deptno);</span></span><br></pre></td></tr></table></figure>
<p><strong><em>(5)检查约束</em></strong><br>检查约束用来强制要求在字段上的每个值都要满足Check中定义的条件<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> amp_salary_check</span><br><span class="line"><span class="keyword">CHECK</span>(salary &gt; <span class="number">2000</span>);</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、视图&quot;&gt;一、视图&lt;/h2&gt;&lt;p&gt;视图也被称为虚表，是一组数据的逻辑表示，视图在SQL语句汇总跳线的样子与表一致，但不是表，只是对应于一条SELECT语句的查询结果集，结果集被赋予一个名字，通常前面加上_v&lt;br&gt;必须有权限才能创建视图，管理员可以通过&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;VIEW&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TO&lt;/span&gt; user_name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;授予用户创建视图的权限&lt;br&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://hellowvirgil.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库基础（四）</title>
    <link href="http://hellowvirgil.github.io/2015/12/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://hellowvirgil.github.io/2015/12/21/数据库基础（四）/</id>
    <published>2015-12-21T00:19:59.000Z</published>
    <updated>2016-07-30T01:45:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、子查询">一、子查询</h2><p>当我们需要执行某条SQL语句时，需要某些查询的结果作为依据时，先期执行的这条语句就是子查询<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">name</span>,sal <span class="keyword">FROM</span> <span class="keyword">WHERE</span> sal &gt; （<span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'CLERK'</span>)</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>除了在SELECT中使用子查询外，也可以在DDL、DML中使用子查询<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> myemp <span class="keyword">AS</span> (<span class="keyword">SELECT</span> <span class="keyword">e</span>.empno,<span class="keyword">e</span>.ename,<span class="keyword">e</span>.sal,<span class="keyword">e</span>.job,<span class="keyword">d</span>.deptno,<span class="keyword">d</span>.dname,<span class="keyword">d</span>.loc </span><br><span class="line">		       <span class="keyword">FROM</span> mep <span class="keyword">e</span>,dept <span class="keyword">d</span> </span><br><span class="line">		       <span class="keyword">WHERE</span> <span class="keyword">e</span>.deptno=<span class="keyword">d</span>.deptno)</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> amp <span class="keyword">WHERE</span> deptno=(<span class="keyword">SELECT</span> deptno <span class="keyword">FROM</span> <span class="keyword">WHERE</span> ename=<span class="string">'CLERK'</span>)</span></span><br></pre></td></tr></table></figure>
<p><strong><em>子查询根据查询的结果不同可分为：</em></strong><br>1.单行单列子查询：查询结果为1个值<br>2.多行单列子查询：查询结果为一个字段，但是有多条记录<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">name</span>,job </span><br><span class="line"><span class="keyword">FROM</span> emp </span><br><span class="line"><span class="keyword">WHERE</span> job <span class="keyword">IN</span>(<span class="keyword">SELECT</span> job <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> deptno=<span class="number">10</span>)</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(sal),deptno </span><br><span class="line"><span class="keyword">FROM</span> emp </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno </span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">MIN</span>(sal) &gt; (<span class="keyword">SELECT</span> <span class="keyword">MIN</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno=<span class="number">30</span>)</span></span><br></pre></td></tr></table></figure>
<p>3.多行多列子查询：查询结果集像一张表，也常当做表来用<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">e</span>.ename,<span class="keyword">e</span>.sal,<span class="keyword">e</span>.deptno</span><br><span class="line"><span class="keyword">FROM</span> emp <span class="keyword">e</span>,(<span class="keyword">SELECT</span> <span class="keyword">AVG</span>(sal) avg_sal,deptno</span><br><span class="line">            <span class="keyword">FROM</span> emp</span><br><span class="line">            <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno) s</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">e</span>.deptno=s.deptno</span><br><span class="line"><span class="keyword">AND</span> <span class="keyword">e</span>,sal&gt;s.avg_sal</span></span><br></pre></td></tr></table></figure></p>
<p>在子查询中需要引用到主查询的字段数据，使用EXISTS关键字，EXISTS后边的子查询至少返回一行数据，则整个条件返回TRUE ,判断子查询不返回数据用NOT EXISTS<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> deptno,<span class="keyword">name</span> </span><br><span class="line"><span class="keyword">FROM</span> dept <span class="keyword">d</span> </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> amp <span class="keyword">e</span> <span class="keyword">WHERE</span> <span class="keyword">d</span>.deptno = <span class="keyword">e</span>.deptno)</span></span><br></pre></td></tr></table></figure></p>
<p>在SELECT子句中使用子查询相当于外连接<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">e</span>.ename,(<span class="keyword">SELECT</span> <span class="keyword">d</span>.dname <span class="keyword">FROM</span> dept <span class="keyword">d</span> <span class="keyword">WHERE</span> <span class="keyword">d</span>.deptno = <span class="keyword">e</span>.deptno) </span><br><span class="line"><span class="keyword">FROM</span> emp <span class="keyword">e</span>;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="二、分页查询">二、分页查询</h2><p>当表中数据量很大时，一次性查询表中全部数据会导致数据全部加载到内存中，对系统资源占用有很大影响，响应速度也慢，但往往用户也不需要一次性将这么多数据全部查看，这时我们可以分批查询表中数据。<br>由于标准SQL没有对分页进行语法定义，所以不同的数据库中分页的语法不一致。</p>
<p><strong><em>ORACLE中有ROWNUM字段，称为伪列</em></strong><br>该字段并不存在于任何一张表中，但是可以从任何一张表去查询该字段，当查询该字段时，ORACLE只要可以从表中查询出一条记录，就会为该条记录中该字段添加行号。行号从1开始，会自动增长。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">ROWNUM</span>,<span class="keyword">name</span> <span class="keyword">FROM</span> amp <span class="keyword">where</span> <span class="keyword">ROWNUM</span> &lt;= <span class="number">5</span></span></span><br></pre></td></tr></table></figure></p>
<p>由于ROWNUM只有查询出一条数据后，才会对该记录编号，然后ROWNUM自增，所以我们不能在第一次查询表中数据时使用ROWNUM&gt;1以上的数字进行过滤，否则将得不到任何数据。为此，需要进行两次查询，第一次仅使用ROWNUM为结果集编号，再基于这个结果集进行二次查询，根据ROWNUM的编号取需要的范围内的记录。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="keyword">ROWNUM</span> rn,ename <span class="keyword">FROM</span> <span class="keyword">FROM</span> emp) <span class="keyword">WHERE</span> rn &gt;= <span class="number">5</span> <span class="keyword">AND</span> rn &lt;= <span class="number">10</span></span></span><br></pre></td></tr></table></figure></p>
<p>当分页查询有排序需求时，要先排序再编号，原因在于：使用ROWNUM对结果集编号是在查询过程中进行的，而ORDER BY排序是在查询出结果后进行的。所以，当排序过后，原本的编号顺序就打乱了。为此，我们要先排序，再将排序后的结果集进行编号，才能得到正确的结果。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span>（<span class="keyword">SELECT</span> <span class="keyword">ROWNUM</span> rn,<span class="keyword">t</span>.* </span><br><span class="line">      <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal <span class="keyword">DESC</span>)  <span class="keyword">t</span>）</span><br><span class="line"><span class="keyword">WHERE</span> rn &gt; <span class="number">5</span> <span class="keyword">AND</span> rn &lt;= <span class="number">10</span></span></span><br></pre></td></tr></table></figure></p>
<p>pageSize：每页显示的条目数<br>page：页数<br>start = （page - 1）<em> pageSize + 1<br>end = page</em>pageSize</p>
<h2 id="三、DECODE_函数">三、DECODE 函数</h2><p><strong><em>DECODE</em></strong><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECODE(expr,search1,result1[<span class="link_label">,search2,result2…</span>][<span class="link_reference">,default</span>])</span><br></pre></td></tr></table></figure></p>
<ul>
<li>DECODE用于比较参数expo的值，如果匹配到哪一个search条件，就返回对应的result结果</li>
<li>可以有多组search和result的对应关系，如果任何一个都没有匹配到，则返回最后default的值</li>
<li>default参数是可选的，如果没有提供default参数值，当没有匹配到时，将返回NULL</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">name</span>,job</span><br><span class="line"><span class="keyword">DECODE</span>(job,</span><br><span class="line">       <span class="string">'MANAGER'</span>,sal * <span class="number">1.2</span>,</span><br><span class="line">       <span class="string">'ANLYST'</span>,sal * <span class="number">1.1</span>,</span><br><span class="line">       <span class="string">'SALESMAN'</span>,sal * <span class="number">1.05</span>,</span><br><span class="line">       sal</span><br><span class="line">) bonus</span><br><span class="line"><span class="keyword">FROM</span> emp;</span></span><br></pre></td></tr></table></figure>
<p><strong><em>和DECODE函数功能相似的有CASE语句</em></strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> ename,job,sal</span><br><span class="line"><span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="string">'MANAGER'</span> <span class="keyword">THEN</span> sal * <span class="number">1.2</span></span><br><span class="line">     <span class="keyword">WHEN</span> <span class="string">'ANLYST'</span> <span class="keyword">THEN</span> sal * <span class="number">1.1</span></span><br><span class="line">     <span class="keyword">WHEN</span> <span class="string">'SALSMAN'</span> <span class="keyword">THEN</span> sal * <span class="number">1.05</span></span><br><span class="line">     <span class="keyword">ELSE</span> sal <span class="keyword">END</span></span><br><span class="line">     bonus</span><br><span class="line"><span class="keyword">FROM</span> emp;</span></span><br></pre></td></tr></table></figure></p>
<p>按字段内容分组<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">DECODE</span> (job,</span><br><span class="line">               <span class="string">'ANALYST'</span>,<span class="string">'VIP'</span>,</span><br><span class="line">               <span class="string">'MANAGER'</span>,<span class="string">'VIP'</span>,</span><br><span class="line">               <span class="string">'OPERATION'</span>),</span><br><span class="line">               job,<span class="keyword">COUNT</span>(*) job_cnt</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">DECODE</span>(job,</span><br><span class="line">                <span class="string">'ANALYST'</span>,<span class="string">'VIP'</span>,</span><br><span class="line">                <span class="string">'MANAGER'</span>,<span class="string">'VIP'</span></span><br><span class="line">                <span class="string">'OPERATION'</span>);</span></span><br></pre></td></tr></table></figure></p>
<p>按字段内容排序<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> deptno,<span class="keyword">name</span>,loc</span><br><span class="line"><span class="keyword">FROM</span> dept</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">DECODE</span>(dname,</span><br><span class="line">                <span class="string">'OPERATIONS'</span>,<span class="number">1</span>,</span><br><span class="line">                <span class="string">'ACCOUNTING'</span>,<span class="number">2</span>,</span><br><span class="line">                <span class="string">'SALES'</span>,<span class="number">3</span>);</span></span><br></pre></td></tr></table></figure></p>
<h2 id="四、排序函数">四、排序函数</h2><p>可以根据指定的字段分组，再根据一个指定的字段排序，然后生成一个组内的编号。</p>
<p><strong><em>ROW_NUMBER</em></strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">ROW_NUMBER</span><span class="params">()</span></span> <span class="function"><span class="title">OVER</span><span class="params">(PARTITION BY col1 ORDER BY col2)</span></span></span><br></pre></td></tr></table></figure></p>
<p>表示根据col1分组，然后在分组内根据col2排序，生成组内连续且唯一的数字，排序也可以指定多个字段<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">name</span>,sal,deptno,ROW_NUMBER() <span class="keyword">OVER</span>(</span><br><span class="line">     <span class="keyword">PARTITION</span> <span class="keyword">BY</span> deptno</span><br><span class="line">     <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal <span class="keyword">DESC</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">FROM</span> emp</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>RANK 相同的数据返回相同排名，生成不连续也不唯一的数字</em></strong><br>跳跃排序，如果有相同数据，则排名相同，但下一个排名不变<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">name</span>,sal,deptno,ROW_NUMBER() <span class="keyword">OVER</span>(</span><br><span class="line">     <span class="keyword">PARTITION</span> <span class="keyword">BY</span> deptno</span><br><span class="line">     <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal <span class="keyword">DESC</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">FROM</span> emp</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>DENSE_RANK 相同的数据返回相同排名，生成连续但不唯一的数字</em></strong><br>如果有相同数据，则排名相同，但下一个排名连续<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">name</span>,sal,deptno,<span class="keyword">DENSE_RANK</span>() <span class="keyword">OVER</span>(</span><br><span class="line">     <span class="keyword">PARTITION</span> <span class="keyword">BY</span> deptno</span><br><span class="line">     <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal <span class="keyword">DESC</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">FROM</span> emp</span></span><br></pre></td></tr></table></figure></p>
<h2 id="五、集合操作">五、集合操作</h2><p><strong><em>UNION、UNION ALL 并集</em></strong><br>UNION 不包含重复元素，UNION ALL 包含重复元素<br>UNION操作符对查询结果排序，UNION ALL不排序<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ename,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job = <span class="string">'MANAGER'</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal &gt; <span class="number">2500</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>INTERSECT 交集</em></strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> ename,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job = <span class="string">'MANAGER'</span></span><br><span class="line"><span class="keyword">INTERSECT</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal &gt; <span class="number">2500</span></span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>MINUS 差集,只有在第一个集合中存在，第二个集合中不存在的才被显示</em></strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> ename,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job = <span class="string">'MANAGER'</span></span><br><span class="line"><span class="keyword">MINUS</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal &gt; <span class="number">2500</span></span></span><br></pre></td></tr></table></figure>
<p>使用并、交、差集时，必须保证结果集的字段相同</p>
<h2 id="六、高级分组函数">六、高级分组函数</h2><p>ROLLUP、CUBE和GROUPING SETS运算符是GROUP BY子句的扩展，可以生成与使用UNION ALL来组合单个分组查询时相同的结果集，用来简化和高效的实现统计查询</p>
<p><strong><em>ROLLUP</em></strong><br>GROUP BY ROLLUP（a,b,c） 的话，那么分组分别会按照：<br>GROUP BY a,b,c<br>GROUP BY a,b<br>GROUP BY a<br>最后将全表看做一组统一计算一次<br>然后再将上述的分组结果并在一个结果集，n个参数的ROLLUP有n+1次分组<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> a,b,<span class="keyword">c</span>,<span class="keyword">SUM</span>(<span class="keyword">d</span>) <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">ROLLUP</span>(a,b,<span class="keyword">c</span>)</span></span><br></pre></td></tr></table></figure></p>
<p>等价于<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> a,b,<span class="keyword">c</span>,<span class="keyword">SUM</span>(<span class="keyword">d</span>) <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> a,b,<span class="keyword">c</span></span><br><span class="line"><span class="keyword">UNION</span> ALL</span><br><span class="line"><span class="keyword">SELECT</span> a,b,<span class="literal">null</span>,<span class="keyword">SUM</span>(<span class="keyword">d</span>) <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> a,b</span><br><span class="line"><span class="keyword">UNION</span> ALL</span><br><span class="line"><span class="keyword">SELECT</span> a,<span class="literal">null</span>,<span class="literal">null</span>,<span class="keyword">SUM</span>(<span class="keyword">d</span>) <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> a</span><br><span class="line"><span class="keyword">UNION</span> ALL</span><br><span class="line"><span class="keyword">SELECT</span> <span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,sun(<span class="keyword">d</span>) <span class="keyword">FROM</span> <span class="keyword">test</span></span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>CUBE</em></strong><br>CUBE是将给定的参数字段的每种组合都进行一次分组，然后将这些组合统计的结果集并在一起显示，n个参数的CUBE有2^n次分组<br>GROUP BY CUBE（a,b,c） 的话，那么分组分别会按照：<br>GROUP BY a,b,c<br>GROUP BY a,b<br>GROUP BY a,c<br>GROUP BY a<br>GROUP BY b,c<br>GROUP BY b<br>GROUP BY c<br>最后对全表进行GROUP BY操作，一共是2^3=8次分组</p>
<p><strong><em>GROUPING SETS</em></strong><br>可以根据自定义的组合方式进行分组，然后将这些分组的结果并在一个结果集中显示,n个参数的GROUPING SETS有n次分组<br>GROUP BY GROUPING SETS（(a,b,c),(a,b)） 的话，那么分组分别会按照：<br>GROUP BY a,b,c<br>GROUP BY a,b<br>GROUPING SETS参数允许重复</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、子查询&quot;&gt;一、子查询&lt;/h2&gt;&lt;p&gt;当我们需要执行某条SQL语句时，需要某些查询的结果作为依据时，先期执行的这条语句就是子查询&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;,sal &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; sal &amp;gt; （&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; sal &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; emp &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&#39;CLERK&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://hellowvirgil.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库基础（三）</title>
    <link href="http://hellowvirgil.github.io/2015/12/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://hellowvirgil.github.io/2015/12/19/数据库基础（三）/</id>
    <published>2015-12-19T03:37:51.000Z</published>
    <updated>2016-07-29T18:12:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、基本查询语句">一、基本查询语句</h2><p><strong><em>FROM 子句后面添加查找的表</em></strong></p>
<p><strong><em>字段的别名</em></strong><br>当我们在使用SELECT语句中查询内容时，若某个字段是一个函数或者表达式的时候，那么在查询结果集中对应的该字段的名字就是这个函数或者表达式，可读性差，这个时候我们可以为该函数或表达式起一个别名，这样结果集中会使用该别名作为该字段的名字。<br>使用语法是列的别名跟在列名后，中间可以加或不加 AS 关键字。<br>如果别名中有空格或者需要区分大小写，需要将别名加上双引号<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">AS</span> studentno <span class="keyword">FROM</span> student;</span></span><br><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="string">"Student NO"</span> <span class="keyword">FROM</span> student;</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p><strong><em>WHERE 子句</em></strong><br>WHERE可以用在DML语句中，也可以用在SELECT语句中，作用是添加过滤条件，只选出满足条件的记录。<br>在SELECT中使用时，当数据库查询表中数据时，每查询一条记录，都会先查看该记录是否满足条件，并将满足条件的记录查询出来。</p>
<h2 id="二、查询条件">二、查询条件</h2><p><strong><em>使用&gt;,&lt;,&gt;=,&lt;=,&lt;&gt;,= 进行判断</em></strong><br>ORACLE中也可以使用!=代替&lt;&gt;,推荐使用&lt;&gt;</p>
<p><strong><em>AND，OR 关键字</em></strong><br>如果希望返回的结果必须满足多个条件，应该使用AND逻辑操作符连接这些条件<br>如果希望返回的结果满足多个条件之一，应该使用OR逻辑操作符连接这些条件<br>AND的优先级高于OR</p>
<p><strong><em>LIKE 条件，模糊查询</em></strong><br>LIKE需要借助两个通配符：<br>% - 表示0到多个字符<br>_ - 标识单个任意字符</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> LIKE <span class="string">'_A%'</span>     <span class="comment">//匹配A为第二个字母的任意字符串</span></span><br></pre></td></tr></table></figure>
<p><strong><em>IN（list）和NOT IN（list） 比较操作符</em></strong><br>list表示值列表，当列或表达式匹配于列表中的任何一个值时，条件为true，该条记录则被显示出来<br>NOT IN取出不符合此列表中的数据记录<br>IN与NOT IN常用于子查询<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">IN</span>(<span class="string">'SMITH'</span>,<span class="string">'JONES'</span>)</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>BETWEEN…AND…</em></strong><br>用来查询符合某个值域范围条件的数据<br>最常见的是使用在数字类型的数据范围上，但对字符类型和日期类型数据也同样适用</p>
<p><strong><em>ANY和ALL</em></strong><br>ANY和ALL不能单独使用，需要配合当行比较操作符&gt;、&gt;=、&lt;、&lt;=一起使用</p>
<blockquote>
<p>> ANY:大于最小<br>&lt; ANY:小于最小<br>> ALL:大于最大<br>&lt; ALL:小于最大</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sal &gt; <span class="keyword">ANY</span>(<span class="number">3000</span>,<span class="number">4000</span>,<span class="number">5000</span>)</span></span><br></pre></td></tr></table></figure>
<p><strong><em>查询条件中使用条件和表达式</em></strong><br>如UPPER，LOW</p>
<p><strong><em>DISTINCT 关键字，可以取出指定字段值相同的记录行</em></strong><br>DISTINCT必须紧跟在SELECT关键字之后<br>DISTINCT后面接多个字段会去除重复的组合<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> student</span></span><br></pre></td></tr></table></figure></p>
<h2 id="三、排序">三、排序</h2><p><strong><em>ORDER BY 子句</em></strong><br>用于排序查询出来的结果集，可以对指定的字段按照升序或者降序排列<br>ORDER BY子句必须写在SELECT语句的最后面<br>ORDER BY 排序默认是按照升序进行，若在后面添加DESC则为降序<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">DESC</span></span></span><br></pre></td></tr></table></figure></p>
<p>ORDER BY 也可以对多个字段进行排序，多字段排序是有优先级，先按照第一个字段的方式排序，在第一个字段相同的那些记录中，再按照第二个字段的方式排序<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">DESC</span>,age <span class="keyword">DESC</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="四、聚合函数">四、聚合函数</h2><p>聚合函数，又称多行函数，分组函数<br>聚合函数可以将多条记录的指定字段的值进行统计，然后得出一个结果<br>聚合函数均忽略NULL值</p>
<p><strong><em>MAX和MIN 求最大值和最小值</em></strong><br>可以用来统计任何数据类型，包括数字、字符和日期<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT <span class="function"><span class="title">MAX</span><span class="params">(sal)</span></span>,<span class="function"><span class="title">MIN</span><span class="params">(sal)</span></span> FROM student</span><br></pre></td></tr></table></figure></p>
<p><strong><em>AVG和SUM 用来统计表达式的平均值和和值</em></strong><br>只能操作数字类型<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT <span class="function"><span class="title">ACG</span><span class="params">(sal)</span></span>,<span class="function"><span class="title">SUM</span><span class="params">(sal)</span></span> FROM student</span><br></pre></td></tr></table></figure></p>
<p><strong><em>如果希望不忽略NULL，可以使用NVL函数将NULL替换来解决</em></strong><br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG<span class="list">(<span class="keyword">NVL</span><span class="list">(<span class="keyword">comm</span>,<span class="number">0</span>)</span>)</span> FROM student</span><br></pre></td></tr></table></figure></p>
<p><strong><em>COUNT 用来计算表中的记录条数，即统计指定字段值不为NULL的记录的条数</em></strong><br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SELECT</span> <span class="built_in">COUNT</span>(comm) <span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure></p>
<p>若要统计总数，不忽略NULL则<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SELECT</span> <span class="built_in">COUNT</span>(*) <span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure></p>
<h2 id="五、分组">五、分组</h2><p><strong><em>GROUP BY 子句</em></strong><br>GROUP BY 是为了配合聚合函数使用的，使用GROUP BY子句后，分组可以更细致，就可以不在将整张表所有记录看做一组再进行统计了，可以将表中指定的字段的值相同的记录看做一组，再进行分组统计。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(sal),<span class="keyword">MIN</span>(sal),deptno <span class="keyword">from</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno</span></span><br></pre></td></tr></table></figure></p>
<p>当SELECT子句中出现了分组函数，那么凡不在聚合函数的单独字段必须出现在GROUP BY子句中，但是反过来没有强制要求。<br>GROUP BY子句后面也可以跟多个字段，当按照多个字段分组时，是按照记录中这些字段值的组合相同的看做一组<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*),deptno,job <span class="keyword">from</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno,job</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>HAVING 子句</em></strong><br>HAVING 子句用来对分组后的结果进一步限制，必须跟在GROUP BY后面，不能单独存在<br>使用分组函数作为判断条件只能出现在 HAVING 中<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(sal),deptno <span class="keyword">FROM</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno <span class="keyword">HAVING</span> <span class="keyword">AVG</span>(sal) &gt; <span class="number">2000</span></span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>WHERE是在第一次从表中查询数据的时候进行过滤，而HAVING是在查询出的数据中进行统计，然后使用统计结果再次进行过滤的。所以WHERE中不能使用分组函数。</em></strong></p>
<h2 id="六、查询语句执行顺序">六、查询语句执行顺序</h2><p> <strong><em>1.FROM子句：执行顺序从后往前、从右到左</em></strong></p>
<ul>
<li><p>数据量较少的表尽量放在后面</p>
<p><strong><em>2.WHERE子句：执行顺序自上而下、从右到左</em></strong></p>
</li>
<li><p>将能过滤掉最大数量记录的条件放在WHERE子句的最后</p>
<p><strong><em>3.GROUP BY：从左往右分组</em></strong></p>
</li>
<li>最好在GROUP BY前使用WHERE将不需要的记录在GROUP BY之前过滤掉</li>
</ul>
<p><strong><em>4.HAVING子句：消耗资源</em></strong></p>
<ul>
<li>尽量避免使用，HAVING会在检索出所有记录之后才对结果集进行过滤，需要排序等操作</li>
</ul>
<p><strong><em>5.SELECT子句：少用 *</em></strong> <strong><em>号，尽量取字段名称</em></strong></p>
<ul>
<li>ORACLE在解析过程中，通过查询数据字典将*号依次转换成所有的列名，消耗时间</li>
</ul>
<p><strong><em>6.ORDER BY子句：执行顺序为从左到右排序，消耗资源</em></strong><br><br></p>
<h2 id="七、关联查询">七、关联查询</h2><p>查询的结果可能来自多张表，要从多张表中获取数据时，就要找到这几张表中记录的对应关系，然后建立联系后分别获取。所以，连接条件（指表之间记录的对应关系）在关联查询中是十分关键的。<br>N张表关联查询，至少要有N-1个连接条件，否则会出现笛卡尔积（这是一个无用的结果集，对系统资源开销大，甚至会导致系统瘫痪）。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT emp<span class="class">.ename</span>,dept<span class="class">.dname</span> FROM emp,dept WHERE emp<span class="class">.deptno</span> = dept.deptno</span><br></pre></td></tr></table></figure></p>
<p>表可以起别名<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">e</span>.ename,<span class="keyword">d</span>.dname <span class="keyword">FROM</span> amp <span class="keyword">e</span>,dept <span class="keyword">d</span> <span class="keyword">WHERE</span> <span class="keyword">e</span>.deptno = <span class="keyword">d</span>.deptno</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>内连接</em></strong><br>内连接返回所有满足链接条件的记录<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">e</span>.ename,<span class="keyword">d</span>.dname <span class="keyword">FROM</span> emp <span class="keyword">e</span> <span class="keyword">JOIN</span> dept <span class="keyword">d</span> <span class="keyword">ON</span> <span class="keyword">e</span>.deptno=<span class="keyword">d</span>.deptno</span></span><br></pre></td></tr></table></figure></p>
<p>关联查询出现的一个问题是，不满足连接条件的数据将不会被显示到结果集中。</p>
<p><strong><em>外连接</em></strong><br>有些情况下，需要返回那些不满足连接条件的记录，这时需要使用外连接<br>外连接不仅返回满足连接条件的记录还返回不满足连接条件的记录<br>外连接分为：<br>1.左外连接：以左表为驱动表，其数据都要显示，来自右表记录中的字段在结果集中若不满足连接条件，则值为NULL.<br>2.右外连接：以右表位驱动表<br>3.全外连接：两张表的数据都要查询出来，哪边不满足哪边值为NULL<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">e</span>.ename,<span class="keyword">d</span>.dname <span class="keyword">FROM</span> emp <span class="keyword">e</span> <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dept <span class="keyword">d</span> <span class="keyword">ON</span> <span class="keyword">e</span>.deptno=<span class="keyword">d</span>.deptno</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">e</span>.ename,<span class="keyword">d</span>.dname <span class="keyword">FROM</span> emp <span class="keyword">e</span> <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dept <span class="keyword">d</span> <span class="keyword">ON</span> <span class="keyword">e</span>.deptno=<span class="keyword">d</span>.deptno</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">e</span>.ename,<span class="keyword">d</span>.dname <span class="keyword">FROM</span> emp <span class="keyword">e</span> <span class="keyword">FULL</span> <span class="keyword">OUTER</span></span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>自连接</em></strong><br>自连接是一种特殊的链接查询，数据来源是一个表，即关联关系来自于单表中的多个列<br>自连接设计的目的是为了解决相同类型数据之间存在父子级关系的数据结构（典型的是树状结构）<br>自连接是通过将表用别名虚拟成两个表的方式实现，可以是等值或不等值连接<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">e</span>.<span class="keyword">name</span>,e2.<span class="keyword">name</span> <span class="keyword">FROM</span> emp <span class="keyword">e</span>,emp e2 <span class="keyword">WHERE</span> e2.empno=<span class="keyword">e</span>.empno</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、基本查询语句&quot;&gt;一、基本查询语句&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;FROM 子句后面添加查找的表&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;字段的别名&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;当我们在使用SELECT语句中查询内容时，若某个字段是一个函数或者表达式的时候，那么在查询结果集中对应的该字段的名字就是这个函数或者表达式，可读性差，这个时候我们可以为该函数或表达式起一个别名，这样结果集中会使用该别名作为该字段的名字。&lt;br&gt;使用语法是列的别名跟在列名后，中间可以加或不加 AS 关键字。&lt;br&gt;如果别名中有空格或者需要区分大小写，需要将别名加上双引号&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; studentno &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; student;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Student NO&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; student;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://hellowvirgil.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库基础（二）</title>
    <link href="http://hellowvirgil.github.io/2015/12/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://hellowvirgil.github.io/2015/12/18/数据库基础（二）/</id>
    <published>2015-12-18T02:59:02.000Z</published>
    <updated>2016-07-30T01:47:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、CHAR_和_VARCHAR_的存储编码">一、CHAR 和 VARCHAR 的存储编码</h2><p>默认单位是字节，可指定为字符</p>
<pre><code>- <span class="keyword">CHAR</span>（<span class="number">10</span>），等价于 <span class="keyword">CHAR</span>（<span class="number">10</span> <span class="keyword">byte</span>）
</code></pre><p>每个英文字符占用一个字节，每个中文按编码不同，占用2-4个字节</p>
<pre><code>- GBK 占用<span class="number">2</span>个字节
- utf-<span class="number">8</span> 占用<span class="number">3</span>个字节
</code></pre><a id="more"></a>
<h2 id="二、CHAR_和_VARCHAR_的最大长度">二、CHAR 和 VARCHAR 的最大长度</h2><p>CHAR 默认长度为1，即  name CHAR 相当于 name CHAR（1），但 VARCHAR 长度不可省略</p>
<h2 id="三、LONG_和_CLOB_类型">三、LONG 和 CLOB 类型</h2><p>LONG—VARCHAR的加长版，存储变长字符串，最多到达2GB的字符串数据</p>
<p>LONG有诸多存储限制:每个表只能有一个LONG类型列；不能作为主键；不能建立索引；不能出现在查询条件中…<br>CLOB：存储定长或变长字符串，最多达4GB的字符串数据</p>
<pre><code><span class="bullet">- </span>ORACLE 建议开发中使用 CLOB 替代 LONG 类型
</code></pre><h2 id="四、字符串函数">四、字符串函数</h2><p><strong><em>CONCAT 拼接字符串</em></strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="keyword">CONCAT</span>(<span class="keyword">name</span>,<span class="string">':'</span>), age) <span class="keyword">FROM</span> student</span></span><br></pre></td></tr></table></figure></p>
<p>使用『||』也可以连接字符串，通常使用它来代替 CONCAT 函数<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">name</span>||<span class="string">':'</span>|| age <span class="keyword">FROM</span> student</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>LENGTH 用于返回字符串长度（字符量)</em></strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">name</span>,<span class="keyword">LENGTH</span>(<span class="keyword">name</span>) <span class="keyword">FROM</span> student</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>UPPER，LOWER 将字符转换为大写或小写</em></strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">UPPER</span>(<span class="keyword">name</span>) <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LOWER</span>(<span class="keyword">name</span>) <span class="keyword">FROM</span> student</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>INITCAP 将首字母转换为大写（其中可以使用空格分隔多个单词，那么每个单词首字母都会大写）,其他字母转换为小写</em></strong><br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SELECT</span> INITCAP(<span class="built_in">name</span>) <span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure></p>
<p><strong><em>DUAL 伪表</em></strong><br>为了满足 SELECT 语法要求使用，当我们查询的数据不来自任何一张表时，可以使用伪表代替 FROM 字句中的内容伪表仅会查询出一条记录<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">UPPER</span>(‘hello<span class="string">') FROM DUAL</span></span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>TRIM 去除当前字符串中两边重复的给定字符,截取集只能有一个字符</em></strong><br><figure class="highlight ruleslanguage"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRIM</span>(<span class="string">'e'</span> <span class="keyword">FROM</span> <span class="string">'eeeehelloeeeee'</span>) <span class="keyword">FROM</span> DUAL     <span class="comment">//a</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>LTRIM，RTRIM 单独去除字符串中左边重复或右边的给定字符，截取集可以有多个字符，会把截取集中的每个字符都去除</em></strong><br><figure class="highlight ruleslanguage"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LTRIM</span>(<span class="string">'esweeehelloeeewsee'</span>,<span class="string">'esw'</span>) <span class="keyword">FROM</span> DUAL;     <span class="comment">//helloeeewsee</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RTRIM</span>(<span class="string">'esweeehelloeeewsee'</span>,<span class="string">'esw'</span>) <span class="keyword">FROM</span> DUAL;     <span class="comment">//esweeehello</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>LPAD，RPAD 补位函数</em></strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">LPAD</span>(<span class="keyword">name</span>,<span class="number">3</span>,<span class="string">'$'</span>) <span class="keyword">FROM</span> student</span></span><br></pre></td></tr></table></figure></p>
<p>如果比原来小则会进行截取<br>通过 LPAD ， RPAD 可以实现左右对齐效果</p>
<p><strong><em>SUBSTR（char，offset，len） 从给定字符串的给定位置开始，连续向后截取len长度的字符串(字符位置从1开始)</em></strong><br>offset可正可负，若是负数，则从倒数字符开始截取<br>len必须是&gt;=0的数字，若截取的字符数量超过实际可以截取的字符数量时，则截取到字符串末尾<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SUBSTR（<span class="string">'HelloWorld'</span>,<span class="number">5</span>,<span class="number">2</span>）     <span class="comment">//oW</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR（<span class="string">'HelloWorld'</span>,-<span class="number">3</span>,<span class="number">2</span>）     <span class="comment">//rl</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>INSTR(char1,char2[,n,m]) 查看char2在char1中的位置</em></strong><br>n:从char1的第几个字符开始查找（不写则为1）<br>m:查找第几次出现（不写则为1）<br>没有返回0<br><figure class="highlight ruleslanguage"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSTR</span> （<span class="string">'HelloWorld'</span>,<span class="string">'l'</span>,<span class="number">4</span>,<span class="number">2</span>）<span class="comment">//9</span></span><br></pre></td></tr></table></figure></p>
<h2 id="五、数值函数">五、数值函数</h2><p><strong><em>ROUND（n[,m]）：用于四舍五入</em></strong><br>参数中的n可以是任何数字，指要被处理的数字</p>
<ul>
<li>m 必须是整数</li>
<li>m 取正数则四舍五入到小数点后第m位</li>
<li>m 取0值则四舍五入到整数位</li>
<li>m 取负数，则四舍五入到小数点前m位</li>
<li>m 缺省，默认值是0</li>
</ul>
<figure class="highlight ruleslanguage"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ROUND</span>（<span class="number">45.678</span>,<span class="number">2</span>） <span class="keyword">FROM</span> dual     <span class="comment">//45.68</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ROUND</span>（<span class="number">45.678</span>,-<span class="number">1</span>） <span class="keyword">FROM</span> dual     <span class="comment">//50</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ROUND</span>（<span class="number">95.678</span>,-<span class="number">2</span>） <span class="keyword">FROM</span> dual     <span class="comment">//100</span></span><br></pre></td></tr></table></figure>
<p><strong><em>TRUNC 与 ROUND 的参数相同，但区别在于，仅保留指定位数，不做四舍五入操作</em></strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT TRUNC（<span class="number">45.678</span>,<span class="number">2</span>） FROM dual     <span class="comment">//45.67</span></span><br><span class="line">SELECT TRUNC（<span class="number">45.678</span>,-<span class="number">1</span>） FROM dual     <span class="comment">//40</span></span><br><span class="line">SELECT TRUNC（<span class="number">95.678</span>,-<span class="number">2</span>） FROM dual     <span class="comment">//0</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>MOD（m，n）模运算，取余</em></strong></p>
<ul>
<li>m 被除数</li>
<li>n 除数</li>
</ul>
<p>若n为0，则直接返回m<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">name</span>,<span class="keyword">MOD</span>(<span class="keyword">id</span>,<span class="number">1000</span>) <span class="keyword">from</span> student</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>CEIL 和 FLOOR 向上取整和向下取整</em></strong><br><figure class="highlight ruleslanguage"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CEIL</span>(<span class="number">4.5</span>) <span class="keyword">FROM</span> dual     <span class="comment">//5</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">FLOOR</span>(<span class="number">4.5</span>) <span class="keyword">FROM</span> dual     <span class="comment">//4</span></span><br></pre></td></tr></table></figure></p>
<h2 id="六、日期转换函数">六、日期转换函数</h2><p><strong><em>SYSDATE 返回一个DATE类型的当前系统时间，精确到秒，默认显示格式是DD-MON-RR</em></strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student hiredate <span class="keyword">VALUES</span> <span class="keyword">SYSDATE</span></span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>SYSTIMESTAMP 返回一个TIMESTAMP类型的当前系统时间，精确到毫秒</em></strong></p>
<p><strong><em>TO_DATE 字符串转时间</em></strong><br>日期类型的数据室可以进行计算的，两个日期类型的值相减，得到的差是相差的天数。给一个日期的值加上一个数字，相当于增加了x天。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> TRUNC((<span class="keyword">SYSDATE</span> - <span class="keyword">TO_DATE</span>(<span class="string">'1994-11-08'</span>,<span class="string">'YYYY-MM-DD'</span>))) <span class="keyword">FROM</span> DUAL</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>TO_CHAR 可以将给定的DATE按照特定的日期格式转化为字符串</em></strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT <span class="function"><span class="title">TO_CHAR</span><span class="params">(TO_DATE(<span class="string">'98-05-30'</span>,<span class="string">'RR_MM_DD'</span>)</span></span>,<span class="string">'YYYY-MM-DD'</span>) FROM DUAL     <span class="comment">//1998-05-30</span></span><br><span class="line">SELECT <span class="function"><span class="title">TO_CHAR</span><span class="params">(SYSDATE,<span class="string">'YYYY"年"MM"月"DD"日"'</span>)</span></span> FROM DUAL    <span class="comment">//2015年12月17日</span></span><br></pre></td></tr></table></figure></p>
<h2 id="七、日期常用函数">七、日期常用函数</h2><p><strong><em>LAST_DAY 返回日期date所在月的最后一天</em></strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">LAST_DAY</span>(<span class="string">'20-2月-09'</span>) <span class="keyword">FROM</span> DUAL</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>ADD_MONTHS（date，i） 返回日期date加上i个月后的日期值</em></strong></p>
<ul>
<li>参数i可以是任何数字，大部分的时候去正值整数</li>
<li>如果i是小数，将会被截取整数后再参与运算</li>
<li>如果i是负数，则获得的是减去i个月后的日期值</li>
</ul>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SELECT</span> <span class="built_in">name</span>，ADD_MONTHS（hiredate，<span class="number">20</span>*<span class="number">12</span>） <span class="keyword">FROM</span> student</span><br><span class="line">`</span><br></pre></td></tr></table></figure>
<p><strong><em>MONTHS_BETWEEN（date1，date2） 计算date1和date2两个日期之间间隔了多少个月</em></strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">name</span>,MONTHS_BETWEEN（<span class="keyword">SYSDATE</span>,hiredate） <span class="keyword">FROM</span> student</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>NEXT_DAY（date，char） 返回date日期数据的下一个周几，周几是由参数char来决定的</em></strong><br>char可以用数字表示，1-7表示周日到周六<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NEXT_DAY(SYSDATE,<span class="number">4</span>) <span class="keyword">as</span>  <span class="string">'NEXT_WEDN'</span> <span class="keyword">FROM</span> DUAL     <span class="comment">//下周三的日期</span></span><br></pre></td></tr></table></figure></p>
<p><em>*</em>LEAST，GREATEST 返回结果是参数中最大或最小的值在比较之前，参数列表中第二个以后的参数类型会被转成第<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">LEAST</span>（<span class="keyword">SYSDATE</span>,<span class="keyword">TO_DATE</span>(<span class="string">'2008-10-10'</span>,<span class="string">'YYYY-MM-DD'</span>)） <span class="keyword">FROM</span> DUAL</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>EXTRACT（date FROM datetime） 从参数datetime中提取参数date指定的数据，比如提取年、月、日</em></strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">name</span>,hiredate <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">EXTRACT</span>（<span class="keyword">YEAR</span> <span class="keyword">FROM</span> hiredate）= <span class="number">1981</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="八、空值操作">八、空值操作</h2><p><strong><em>判断一个字段的值是否为NULL时，不能使用『=』判断，而是使用 IS NULL 或 IS NOT NULL</em></strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> gender=<span class="string">'M'</span> <span class="keyword">WHERE</span> gender <span class="keyword">IS</span> <span class="literal">NULL</span></span></span><br></pre></td></tr></table></figure></p>
<p>NULL与字符串链接，等于什么都没干<br>NULL与数字运算，结果还是NULL</p>
<p><strong><em>NVL（expr1，expr2）将NULL转变为非NULL值,若expr1为NULL，则函数返回expr2，否则就返回expr1的值</em></strong><br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SELECT</span> <span class="built_in">name</span>,NVL(comm,<span class="number">0</span>) <span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure></p>
<p><strong><em>NVL2（expr1,expr2,expr3）和NVL类似，用来判断expr1是否为NULL，如果不为NULL，则返回expr2，如果为NULL，则返回expr3</em></strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> <span class="keyword">name</span> ,NVL2(comm,’有奖金’,<span class="string">'没有奖金'</span>) <span class="keyword">FROM</span> student</span></span><br></pre></td></tr></table></figure></p>
<p>NVL2能实现NVL的功能，但NVL不能实现NVL2的全部功能</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、CHAR_和_VARCHAR_的存储编码&quot;&gt;一、CHAR 和 VARCHAR 的存储编码&lt;/h2&gt;&lt;p&gt;默认单位是字节，可指定为字符&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- &lt;span class=&quot;keyword&quot;&gt;CHAR&lt;/span&gt;（&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;），等价于 &lt;span class=&quot;keyword&quot;&gt;CHAR&lt;/span&gt;（&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;每个英文字符占用一个字节，每个中文按编码不同，占用2-4个字节&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- GBK 占用&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;个字节
- utf-&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; 占用&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;个字节
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://hellowvirgil.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库基础（一）</title>
    <link href="http://hellowvirgil.github.io/2015/12/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://hellowvirgil.github.io/2015/12/17/数据库基础（一）/</id>
    <published>2015-12-17T04:44:45.000Z</published>
    <updated>2016-07-30T01:51:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、数据库原理">一、数据库原理</h2><blockquote>
<p>没有使用数据库之前，通过文件保存的缺陷？</p>
</blockquote>
<p>缺乏对数据的整体管理，数据不变修改；不利于数据分析和共享；数据量急剧增长，不利于持久保存。</p>
<p>DB — 按照特定数据结构组织、存储、管理数据的数据库<br>DBMS — 数据库管理系统</p>
<p>表由行和列组成。<br>列 — 字段<br>行 — 记录</p>
<p>数据库分为关系型数据库和非关系型数据库<br>数据库本身不区分大小写<br><a id="more"></a></p>
<h2 id="二、SQL">二、SQL</h2><p><strong><em>SQL（strutted query language，结构化查询语言）可分为：</em></strong></p>
<ul>
<li>DDL 数据库定义语言，用于建立、修改、删除数据库对象</li>
<li>DML 数据操作语言，用于改变表当中的数据</li>
<li>TCL 事物控制语言，用来维护数据一致性的语句</li>
<li>DQL 数据查询语言，用来查询所需要的数据</li>
<li>DCL 数据控制语言，用于执行权限的授予和收回工</li>
</ul>
<p>在数据库中， SQL 语句本省是不区分大小写的，但是为了增加可读性，通常会将关键字与非关键字按照大小写区分开。</p>
<p>在 SQL Developer 中，当需要连续执行多条 SQL 语句时，每条语句可以在结尾使用『;』来分割多条语句，这样他们是可以同时执行的，但是『;』不是 SQL 本身所需要的东西。也可以选中某条 SQL ，单独执行。</p>
<h2 id="三、数据类型（Oracle）">三、数据类型（Oracle）</h2><p><strong><em>NUMBER（P，S）表示数字类型，ORACLE中所有的数字都是用NUMBER类型表示</em></strong><br>P表示数字的总位数S表示小数点后面的位数</p>
<p>若省略S值则表示一个整数，P包含S<br>例如，id NUMBER（6，2）表示整数占四位，小数占两位，最大取值为9999.99</p>
<p><strong><em>CHAR（N），表示固定长度的字符类型</em></strong></p>
<blockquote>
<p>N 表示占用的字节数,最大长度是2000字节</p>
</blockquote>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">name</span> <span class="built_in">CHAR</span>（<span class="number">20</span>）</span><br></pre></td></tr></table></figure>
<p>表示最多可存储20个字节的字符串，占用空间固定，无论实际数据多长都会补充若干空格直到达到实际指定长度。<br>优点：查询效率好<br>缺点：浪费磁盘空间</p>
<p><strong><em>VARCHAR（N），VARCHAR2（N），VARCHAR2 为 ORACLE 独有，均表示变长字符串类型</em></strong></p>
<blockquote>
<p>N 表示最多可存储的字节数,最大长度4000字节</p>
</blockquote>
<p>根据保存的数据长度，占用空间是变化的<br>优点：磁盘空间利用效率高<br>缺点：查询效率低</p>
<p><strong><em>DATE，用于定义日期时间的数据</em></strong></p>
<blockquote>
<p>长度是7个字节，7个字节分别存储世纪，年，月，日，时，分，秒，所以时间的精度最多到秒</p>
</blockquote>
<p>默认格式DD-MON-RR，例如11-APR-71，也可以存储为DD-MON-YYYY格式<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">date</span> <span class="operator">DATE</span></span><br></pre></td></tr></table></figure></p>
<p>表示date列中存放的是日期数据</p>
<h2 id="四、DDL语句">四、DDL语句</h2><p><strong><em>1.CREATE 新建表</em></strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">schema</span>.]table_name(</span><br><span class="line">     column_name datatype[<span class="keyword">DEFAULT</span> expr][,..]</span><br><span class="line">);</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">     <span class="keyword">name</span> VARCHAR2(<span class="number">20</span>),</span><br><span class="line">     gender <span class="built_in">CHAR</span>(<span class="number">1</span>)</span><br><span class="line">);</span></span><br></pre></td></tr></table></figure>
<p><strong><em>2.DROP 删除表</em></strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> table_name;</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>3.DESC 查看表结构</em></strong><br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC table_name<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>4.DEFAULT 关键字给列指定默认值，不指定时所有数据类型默认值均为 NULL</em></strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gender <span class="function"><span class="title">CHAR</span><span class="params">(<span class="number">1</span>)</span></span> DEFAULT <span class="string">'M'</span></span><br></pre></td></tr></table></figure></p>
<p>字符串内容是区分大小写的</p>
<p><strong><em>5.NOT NULL 关键字是一种约束条件，用于确保字段的值不为空</em></strong><br>默认情况下，任何列都允许有空值，当某个字段使用NOT NULL修饰后，任何情况下该字段都不能为空<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name <span class="function"><span class="title">VARCHAR2</span><span class="params">(<span class="number">20</span>)</span></span> NOT NULL</span><br></pre></td></tr></table></figure></p>
<p><strong><em>6.RENAME 修改表名</em></strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">RENAME</span> old_name <span class="keyword">TO</span> new_name;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">RENAME</span> student <span class="keyword">TO</span> teacher</span></span><br></pre></td></tr></table></figure>
<p><strong><em>7.ALTER 修改表结构</em></strong><br>(1)给表添加列可以使用 ALTER TABLE 的ADD字句实现，向表中添加字段只能追加到表的最后，不能在表中间添加新的字段<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span>(</span><br><span class="line">     age <span class="built_in">NUMBER</span>(<span class="number">3</span>)</span><br><span class="line">)</span></span><br></pre></td></tr></table></figure></p>
<p>(2)使用ALTER TABLE 的DROP字句删除列<br>当表中有数据时，会将删除的字段在每条记录对应的值都删除，若表中数据量大时会耗时<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">DROP</span>(</span><br><span class="line">     <span class="keyword">name</span> VARCHAR2(<span class="number">20</span>)</span><br><span class="line">)</span></span><br></pre></td></tr></table></figure></p>
<p>(3)使用 MODIFY 子句可以改变表中列的数据、长度和默认值<br>修改仅对以后插入的数据有效<br>如果把长度由大改小，有可能不成功<br>建议在表中没有数据时进行，尽量不要修改类型，若修改长度，尽量不要缩小<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">MODIFY</span>(</span><br><span class="line">     age <span class="built_in">NUMBER</span>(<span class="number">3</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span></span><br><span class="line">);</span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>8.TRUNATE 清空表数据</em></strong><br>立即生效，无法回退<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> table_name</span></span><br></pre></td></tr></table></figure></p>
<h2 id="五、DML_语句">五、DML 语句</h2><p><strong><em>INSERT 添加数据</em></strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name [(col1,col2)] <span class="keyword">VALUES</span> (val1,val2)</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (<span class="keyword">id</span>,<span class="keyword">name</span>,<span class="built_in">date</span>) <span class="keyword">VALUES</span> (<span class="number">1002</span>,<span class="string">'张三'</span>,<span class="string">'01-SEP-03'</span>);</span></span><br><span class="line"><span class="operator"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (<span class="keyword">id</span>,<span class="keyword">name</span>,<span class="built_in">date</span>) <span class="keyword">VALUES</span> (<span class="number">1002</span>,<span class="string">'张三'</span>,<span class="keyword">TO_DATE</span>(<span class="string">'2009-09-01'</span>,<span class="string">'YYYY-MM-DD'</span>));</span></span><br></pre></td></tr></table></figure>
<p><strong><em>UPDATE 修改表中记录中指定字段的值</em></strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">UPDATE</span> table_name <span class="keyword">SET</span> col1=new_val1，col2=new_val2… [<span class="keyword">WHERE</span> condition]</span></span><br></pre></td></tr></table></figure></p>
<p>UPDATE通常会使用WHERE来限定要修改的记录，否则整张表都会被修改。若使用了WHERE,则只会修改满足条件的记录。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> <span class="keyword">name</span>=<span class="string">'李四'</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">3</span></span></span><br></pre></td></tr></table></figure></p>
<p><strong><em>DELETE 删除数据</em></strong><br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEKETE <span class="keyword">FROM</span> table_name [<span class="keyword">WHERE</span> condition]</span><br></pre></td></tr></table></figure></p>
<p>若不添加 WHERE 字句会将表中所有是数据删除，等同于清空表操作。添加 WHERE 子句后，只会删除表中满足  WHERE 条件的记录。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'李四'</span></span></span><br></pre></td></tr></table></figure></p>
<p>如果是删除全部数据，且数据量大，DELETE 语句效率比 TRUNCATE 语句低， DELETE 是逐行删除， TRUNCATE 是直接删除全部数据。但 TRUNCATE 是 DDL 语句，不受事物控制。</p>
<p><strong><em>DML语句是伴随事物的，操作的数据并没有真的提交到服务器，需要 COMMIT 命令才会提交<br>执行第一条DML语句开始一个新事物，执行TCL语句会做相应处理事物</em></strong></p>
<h2 id="六、TCL语句">六、TCL语句</h2><p><strong><em>COMMIT 提交事物</em></strong><br><strong><em>ROLLBACK 回退事物</em></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、数据库原理&quot;&gt;一、数据库原理&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;没有使用数据库之前，通过文件保存的缺陷？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;缺乏对数据的整体管理，数据不变修改；不利于数据分析和共享；数据量急剧增长，不利于持久保存。&lt;/p&gt;
&lt;p&gt;DB — 按照特定数据结构组织、存储、管理数据的数据库&lt;br&gt;DBMS — 数据库管理系统&lt;/p&gt;
&lt;p&gt;表由行和列组成。&lt;br&gt;列 — 字段&lt;br&gt;行 — 记录&lt;/p&gt;
&lt;p&gt;数据库分为关系型数据库和非关系型数据库&lt;br&gt;数据库本身不区分大小写&lt;br&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://hellowvirgil.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>百度面试整理</title>
    <link href="http://hellowvirgil.github.io/2015/09/21/%E7%99%BE%E5%BA%A6%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/"/>
    <id>http://hellowvirgil.github.io/2015/09/21/百度面试整理/</id>
    <published>2015-09-21T06:00:45.000Z</published>
    <updated>2016-07-30T01:32:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>很晚才接到一面的电话通知，差点以为我挂了。不得不说，百度的HR是我迄今为止遇到最好的HR，不厌其烦的给我打电话，倘若拿到百度offer的话，那个HR哥哥是我最应该感谢的人~<br><a id="more"></a></p>
<h2 id="一面">一面</h2><p>一面的问题都比较基础，但有一部分答得不是很好，可能是因为太紧张了 - -</p>
<blockquote>
<p>实现一个insertAfter方法</p>
</blockquote>
<p>这个这么简单的问题我居然没想到，当时忘了节点的 nexSibling 属性，导致我是用 父级元素的 children 方法查找目标元素的兄弟节点的，效率差的不是一点点，怪不得面试官一直说还有更好的方法。</p>
<blockquote>
<p>固定宽高的元素实现水平垂直居中</p>
</blockquote>
<p>由于宽高已知<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.parent</span> <span class="rules">&#123; </span><br><span class="line">	<span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>; </span><br><span class="line">&#125;</span> </span><br><span class="line"><span class="class">.child</span> <span class="rules">&#123; </span><br><span class="line">	<span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">300px</span></span></span>; </span><br><span class="line">	<span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">20px</span></span></span>; </span><br><span class="line">	<span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>; </span><br><span class="line">	<span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">50%</span></span></span>; </span><br><span class="line">	<span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">50%</span></span></span>; </span><br><span class="line">	<span class="rule"><span class="attribute">margin</span>:<span class="value"> -<span class="number">70px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">170px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>或使用flex<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.parent</span> <span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">display</span>:<span class="value"> flex</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">justify-content</span>:<span class="value"> center</span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">align-items</span>:<span class="value"> center</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>浏览器事件模型</p>
</blockquote>
<p>原始事件模型（onclick），IE事件模型（atachEvent），DOM2事件模型（addEventListener）。后面聊到了事件冒泡，事件捕获和事件代理。</p>
<blockquote>
<p>原生实现 jsonp ， calback函数如何调用的？</p>
</blockquote>
<p>创建一个 script 标签， src 属性设置为目标 url ，服务器接收到请求后返回一个 callback 函数字符串，浏览器解析后是一个函数调用表达式，参数为服务器返回的信息，调用后移除 script 标签。</p>
<blockquote>
<p>有哪些块级元素？</p>
</blockquote>
<p>当时回答了 div , ul , ol , dl , p , form 。</p>
<blockquote>
<p>处理 url ，取出query</p>
</blockquote>
<p>通过字符串的split方法</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">query</span> = document.URL.<span class="keyword">split</span>('?');</span><br><span class="line"><span class="keyword">var</span> key = <span class="keyword">query</span>[<span class="keyword">query</span>.length - 1].<span class="keyword">split</span>('&amp;');</span><br></pre></td></tr></table></figure>
<blockquote>
<p>实现一个排序算法</p>
</blockquote>
<p>冒泡，快排，直接插入排序都可以</p>
<blockquote>
<p>js 实现私有属性和方法</p>
</blockquote>
<p>通过闭包实现<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> <span class="keyword">private</span> = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    	add: <span class="function"><span class="keyword">function</span><span class="params">(n)</span> </span>&#123;</span><br><span class="line">    		<span class="keyword">private</span>+=n;</span><br><span class="line">    		<span class="keyword">return</span> <span class="keyword">private</span>;</span><br><span class="line">    	&#125;,</span><br><span class="line">    	<span class="keyword">get</span>: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    		<span class="keyword">return</span> <span class="keyword">private</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="二面">二面</h2><blockquote>
<p>两栏布局</p>
</blockquote>
<p>非常规两栏布局</p>
<blockquote>
<p>性能优化</p>
</blockquote>
<p>前面提到过，回答这个问题已经很熟练了。</p>
<blockquote>
<p>实现鼠标拖拽元素</p>
</blockquote>
<p>mousedown 和 mousemove事件一起使用， clienX ， clientY ， offsetWidth ， offsetHeight 等属性的使用，注意移除事件。</p>
<blockquote>
<p>实现无刷新上传文件</p>
</blockquote>
<p>这个当时没答上。</p>
<blockquote>
<p>浏览器从输入 url 到页面渲染出来发生了什么？</p>
</blockquote>
<p>经典问题，我主要从域名解析， TCP ， Http ，浏览器渲染等几个方面说了下。</p>
<blockquote>
<p>有哪些节点类型？</p>
</blockquote>
<p>文档节点，元素节点，属性节点，注释节点等。</p>
<blockquote>
<p>代码实现输入一个数 n ，生成所有 n 位二进制数</p>
</blockquote>
<p>原理是遍历 0 至 n-1，然后通过 toString 方法转换为二进制数，最后为不足 n 位的数补零。</p>
<h2 id="三面">三面</h2><blockquote>
<p>在阿里做了些什么</p>
<p>做过什么组件么？</p>
<p>自己的优缺点？</p>
<p>未来三年的打算</p>
</blockquote>
<p>这些问题因人而异了，结合自己的情况谈就好，说了很多在阿里的实习经验。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很晚才接到一面的电话通知，差点以为我挂了。不得不说，百度的HR是我迄今为止遇到最好的HR，不厌其烦的给我打电话，倘若拿到百度offer的话，那个HR哥哥是我最应该感谢的人~&lt;br&gt;
    
    </summary>
    
    
      <category term="面经" scheme="http://hellowvirgil.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>蘑菇街面试整理</title>
    <link href="http://hellowvirgil.github.io/2015/09/10/%E8%98%91%E8%8F%87%E8%A1%97%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/"/>
    <id>http://hellowvirgil.github.io/2015/09/10/蘑菇街面试整理/</id>
    <published>2015-09-10T14:42:38.000Z</published>
    <updated>2016-07-28T15:42:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>离开杭州前的最后一天跑去财富大厦面试，不得不说面试官给人的感觉很好，以下是几个我比较有印象的问题：</p>
<blockquote>
<p>做过最有难度的项目？其中遇到的问题？</p>
</blockquote>
<p>我回答了询盘落地页，其中遇到了打点曝光，跨域等问题。接着面试官问跨域的解决方案？josnp ， CORS ，服务器代理， document.domain ， websocket等。每样都大概介绍了优缺点和应用场景。接着问 josnp 的实现原理，回答是本质上是通过创建 script 实现跨域，将返回的 json 数据做为参数传入 callback。<br><a id="more"></a></p>
<blockquote>
<p>页面优化的方法？</p>
</blockquote>
<p>压缩 js ， css ，减少 http 请求， css sprite ，减少 cookie 大小等。</p>
<blockquote>
<p>将来想在前端发展的方向？</p>
</blockquote>
<p>我回答移动端（个人兴趣）和搜索场景（主要我觉得容易上手）。移动端需要做哪些优化？只答了一部分，面试官说你没有主动去学习移动端知识啊 - - 确实是，要吸取教训。<br>移动端的优化有首屏加载，按需加载，滚动加载， 使用 Loading 进度条，使用 css3 、 iconfont 代替图片， touch 代替  click ，缓存 dom 选择与计算 ， 不滥用 float ，避免重设图片大小，标准化浏览器前缀，尽量使用 css3 动画等。</p>
<blockquote>
<p>对开源项目的贡献？最近关注的开源项目？</p>
</blockquote>
<p>我回答了对 fxs 前端技能树的贡献，最近关注的是 Sea.js。然后面试官问了 Sea.js 模块 reuire 时才调用， ddefine 时只加载是如何实现的？这个没答上来。结束后查了资料，发现 sea.js 由模块状态的流转来定义行为， define 一个模块时，加载结束回调函数会将 mod.status 变成 LOADED ， require 方法的回调函数会判断当前 mod 状态，mod.status &lt; STATUS.EXECUTING 会执行加载的模块，执行结束后会将 mod.status 变成 EXECUTED。</p>
<blockquote>
<p>在阿里实习印象最深的是什么？</p>
</blockquote>
<p>我回答了搜索业务场景下的组件模块化，即 Normandy 平台，还有前端集成测试。面试官接着问如果让你做组件化，你会怎么做？我答会按功能进行封装，尽量保证组件的复用性，抽象出相同的部分。面试官继续问封装过什么组件么？我回答了懒加载组件。接着面试官问如何触发懒加载？可不可以优化？我回答通过检测 scrollTop 来触发懒加载，这样会一直计算 scrollTop 的值，优化的办法是不要每次滚轮滚动都计算 scrollTop ，而是每隔一个断点计算一次（比如懒加载的模块高度为 300px ，那就每隔 300px 触发一次计算，若满足条件则加载），可以大大减少计算量。</p>
<blockquote>
<p>对 Flux 应用单向数据流的理解？</p>
</blockquote>
<p>这个不了解，查阅资料后发现 Flux 是 Facebook 用户建立客户端 Web 应用的前端架构， 它通过利用一个单向的数据流补充了 React 的组合视图组件，这更是一种模式而非正式框架，你能够无需许多新代码情况下立即开始使用 Flux 。</p>
<p><img src="http://7xiw1x.com1.z0.glb.clouddn.com/flux.png" alt="Flux"></p>
<p>一个单向数据流是Flux模式的核心，上面示图应该是Flux程序员心中主要的模型图。dispatcher 存储和视图是有着不同输入输出的独立节点，Action动作是一个简单对象，只是包含新的数据和一个标识符类型的属性。</p>
<p>视图也许引起新的动作Action，这个动作作为用户交互的响应将在整个系统传播：</p>
<p><img src="http://7xiw1x.com1.z0.glb.clouddn.com/flux2.png" alt="Flux"></p>
<p>所有通过dispatcher的数据流将作为一个集中式Hub，动作Action在一个action creator方法中被提供给dispatcher，这个动作通常来自于视图中用户的交互，dispatcher然后调用存储已经注册其中的回调函数，分发Action动作到所有的存储，在它们注册的回调函数中，存储会响应每个和它保存的状态有关的每个动作Action，存储然后发射一个 change改变的事件去提醒controller-view控制器-视图，更新到刚刚改变的新数据。controller-view监听这些事件，然后在一个事件处理器中从存储中获取数据，controller-view调用它们自己的”setState()”方法，这会触发视图的重新渲染，包括DOM组件树中所有更新。</p>
<blockquote>
<p>熟悉公司的发布流程么？</p>
</blockquote>
<p>是的，为此我还用 Node.js 写了一个发布 style 应用的插件。接着介绍了这个插件如何实现的。</p>
<p>通过这次面试了解到自己还有很多不足，没有深抓细节、不够主动，还有注意要有意识地向自己了解的方向引导，下次一定做得更好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;离开杭州前的最后一天跑去财富大厦面试，不得不说面试官给人的感觉很好，以下是几个我比较有印象的问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;做过最有难度的项目？其中遇到的问题？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我回答了询盘落地页，其中遇到了打点曝光，跨域等问题。接着面试官问跨域的解决方案？josnp ， CORS ，服务器代理， document.domain ， websocket等。每样都大概介绍了优缺点和应用场景。接着问 josnp 的实现原理，回答是本质上是通过创建 script 实现跨域，将返回的 json 数据做为参数传入 callback。&lt;br&gt;
    
    </summary>
    
    
      <category term="面经" scheme="http://hellowvirgil.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>拥抱变化 : )</title>
    <link href="http://hellowvirgil.github.io/2015/09/03/%E6%8B%A5%E6%8A%B1%E5%8F%98%E5%8C%96/"/>
    <id>http://hellowvirgil.github.io/2015/09/03/拥抱变化/</id>
    <published>2015-09-03T05:26:11.000Z</published>
    <updated>2016-07-28T15:45:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>突然之间，拥抱变化变成了一个很火热的词，一谈到‘拥抱变化’，人人义愤填膺。</p>
<p>就我而言，这件事并没有对我产生什么影响。也许是我性格的原因，我做事总是考虑最坏的打算。早在拿到实习生offer的那一刻，我就已经在想转正面试失败的话我应该怎么做了。<br><a id="more"></a><br>公司突然做出这样的决定，我倒是没怪过谁，我会看做是自己能力不足，还需磨砺。我虽然对这种出尔反尔的行为感到不满，但倒也不至于变成阿里黑。每个人，乃至每个组织都有需要抉择的时刻，看孰轻孰重吧。所以我理解这个决定，哪怕我不认可。</p>
<p>经历这些，也明白一个道理，没有什么是十拿九稳的，这个世界充满变数，努力学习才能让自己把握多一点。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;突然之间，拥抱变化变成了一个很火热的词，一谈到‘拥抱变化’，人人义愤填膺。&lt;/p&gt;
&lt;p&gt;就我而言，这件事并没有对我产生什么影响。也许是我性格的原因，我做事总是考虑最坏的打算。早在拿到实习生offer的那一刻，我就已经在想转正面试失败的话我应该怎么做了。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://hellowvirgil.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>《Web前端安全黑客技术揭秘》读书笔记</title>
    <link href="http://hellowvirgil.github.io/2015/08/31/%E3%80%8AWeb%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E6%8A%80%E6%9C%AF%E6%8F%AD%E7%A7%98%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://hellowvirgil.github.io/2015/08/31/《Web前端安全黑客技术揭秘》读书笔记/</id>
    <published>2015-08-31T15:16:34.000Z</published>
    <updated>2016-07-28T15:41:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博客详细记录我在阅读本书过程中觉得重要的知识点以及我觉得需要了解的各种前端安全概念。</p>
<h2 id="第一章_Web安全的关键点">第一章 Web安全的关键点</h2><ol>
<li>数据与指令</li>
<li>浏览器同源策略</li>
<li>信任与信任关系</li>
<li>社会工程学的作用</li>
<li>攻防不单一</li>
<li>场景很重要</li>
</ol>
<blockquote>
<p>浏览器的同源策略：不同域的客户端脚本在没明确授权的情况下，不能读写对方的资源。</p>
</blockquote>
<a id="more"></a>
<h2 id="第二章_前端基础">第二章 前端基础</h2><p>1.URL</p>
<p>格式：&lt;scheme&gt;://&lt;netloc&gt;/&lt;path&gt;?&lt;query&gt;#&lt;fragment&gt;</p>
<p>例如，<a href="http://www.foo.com/path/f.php?id=1&amp;type=cool#new" target="_blank" rel="external">http://www.foo.com/path/f.php?id=1&amp;type=cool#new</a></p>
<p>对应关系是：</p>
<p>&lt;scheme&gt; - http<br>&lt;netloc&gt; - www.foo.com<br>&lt;path&gt; - /path/f.php<br>&lt;query&gt; - id=1&amp;type=cool<br>&lt;fragment&gt; - new</p>
<blockquote>
<p>URL编码方式，有三类：escape、encodeURI、encodeURIComponent，对应的解码函数是：unescape、decodeURI、decodeURIComponent。这三个编码函数是有差异的，甚至在自动URI编码中也存在差异。</p>
</blockquote>
<p>2.HTTP协议</p>
<p>URL的请求协议几乎都是 http ，每次请求响应后都会立即断开或延时断开，断开后，下一次连接再重新建立。</p>
<blockquote>
<p>通过 Cookies 进行会话跟踪，第一次响应时设置的 Cookies 在随后的每次请求中都会发送出去。Cookies 还可以包括登录认证后的身份信息。</p>
</blockquote>
<p>3.JavaScript</p>
<p>(1)DOM树<br>我们的隐私数据可能存储在以下位置：</p>
<ul>
<li>HTML 内容中</li>
<li>浏览器本地存储中，如 Cookies 等</li>
<li>URL 地址中</li>
</ul>
<p>(2)iframe</p>
<p>父页与子页之间如何跨文档读写数据？</p>
<blockquote>
<p>如果父页和子页之间是同域，父页可以通过调用子页的 contentWindow 来操作子页的 DOM 树，同理，子页可以调用父页的 contentWindow 来操作父页的 DOM 树。如果不同域，则必须严格遵守同源策略，但子页还是可以对父页的 location 值进行写操作，这样可以让父页重定向到其他网页，不过对 location 的操作仅仅只有写权限。</p>
</blockquote>
<p>(3)CORS</p>
<blockquote>
<p>W3C 的新标准中， CORS（Cross-Origin-Resource Sharing）开始推进浏览器支持这样的跨域方案。发起请求会自动带上 Origin 头，目标域会判断 Origin 值，如果是自己预期的就会返回 Access-Controll-Allow-Origin 头表示同意跨域。IE 下不使用 XMLHttpRequet 对象，而是使用自己的 XDomainRequest 对象。</p>
</blockquote>
<p>(4)Cookie 安全</p>
<p>Cookie的重要字段如下：<br>[name][value][domain][path][expires][httpOnly][secure]</p>
<ul>
<li>子域 Cookie 机制<ul>
<li>设置 Cookie 可以指定 domain 为父级域，好处是可以在不同子域共享 Cookie ，坏处就是攻击者控制的其他子域也能读到这个 Cookie。</li>
</ul>
</li>
<li>路径 Cookie 机制<ul>
<li>通过跨 iframe 进行 DOM 操作来跨路径读取 Cookie</li>
</ul>
</li>
<li>HttpOnly Cookie 机制<ul>
<li>仅在 HTTP 层面上传输的 Cookie，当设置了 HttpOnly 标识后，客户端脚本就无法读写该 Cookie。</li>
</ul>
</li>
<li>Secure Cookie 机制<ul>
<li>设置了 Secure 标识的 Cookie 仅在 HTTPS 上安全传输，如果请求是 HTTP 的，就不会带上这个 Cookie。</li>
</ul>
</li>
<li>本地 Cookie 与内存 Cookie<ul>
<li>如果没有设置过期时间，这样的 Cookie 会随着浏览器的关闭从内存消失，如果设置为未来的某个时间点，那么这样的 Cookie 就会以文本形式保存在操作系统本地。</li>
</ul>
</li>
<li>Cookie 的 P3P 性质<ul>
<li>该字段用于标识是否允许目标网站的 Cookie 被另一个域通过加载目标网站而设置或发送，仅 IE 执行了该策略。    </li>
</ul>
</li>
</ul>
<p>(5)本地存储风险</p>
<p>本地存储的方式有很多：</p>
<ul>
<li>Cookie</li>
<li>UserData</li>
<li>localStorage</li>
<li>local Database</li>
<li>Flash Cookie</li>
</ul>
<p>本地存储的主要风险是被植入广告跟踪标识。</p>
<p>(6)JavaScript 函数劫持</p>
<p>只要在函数出发触发前，重写这个函数即可。</p>
<p>4.CSS</p>
<p>(1)CSS 容错性</p>
<p>(2)样式伪装</p>
<p>(3)CSS 伪装</p>
<p>:visited 伪类技巧（已修补）<br>::selection（Chrome 下有效）</p>
<p>(4)CSS3 的属性选择符</p>
<p>5.ActionScript</p>
<p>(1)Flash 安全沙箱</p>
<ul>
<li>权限控制<ul>
<li>管理用户控制</li>
<li>用户控制</li>
<li>Web 站点控制</li>
<li>作者开发人员控制</li>
</ul>
</li>
<li>安全沙箱<ul>
<li>远程沙箱</li>
<li>本地沙箱</li>
</ul>
</li>
</ul>
<p>(2)HTML 嵌入 Flash 的安全相关配置</p>
<p>(3)跨站 Flash</p>
<p>(4)参数传递</p>
<p>(5)Flash 里的内嵌 HTML</p>
<p>(6)与JavaScript 通信</p>
<p>(7)网络通信</p>
<p>(8)其他安全问题</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇博客详细记录我在阅读本书过程中觉得重要的知识点以及我觉得需要了解的各种前端安全概念。&lt;/p&gt;
&lt;h2 id=&quot;第一章_Web安全的关键点&quot;&gt;第一章 Web安全的关键点&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;数据与指令&lt;/li&gt;
&lt;li&gt;浏览器同源策略&lt;/li&gt;
&lt;li&gt;信任与信任关系&lt;/li&gt;
&lt;li&gt;社会工程学的作用&lt;/li&gt;
&lt;li&gt;攻防不单一&lt;/li&gt;
&lt;li&gt;场景很重要&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;浏览器的同源策略：不同域的客户端脚本在没明确授权的情况下，不能读写对方的资源。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="安全" scheme="http://hellowvirgil.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="读书笔记" scheme="http://hellowvirgil.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JS实现继承</title>
    <link href="http://hellowvirgil.github.io/2015/08/29/JS%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF/"/>
    <id>http://hellowvirgil.github.io/2015/08/29/JS实现继承/</id>
    <published>2015-08-29T09:21:14.000Z</published>
    <updated>2016-07-28T16:06:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>这两天整理了一下js如何实现继承，js是门灵活的语言，实现一种功能往往有多种做法,ECMAScript没有明确的继承机制，而是通过模仿实现的，根据js语言的本身的特性,js实现继承有以下通用的几种方式<br>比如，现在有一个”动物”对象的构造函数。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.species = <span class="string">"动物"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>还有一个”猫”对象的构造函数。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span><span class="params">(name,color)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>怎样才能使”猫”继承”动物”呢？</p>
<h2 id="一、_构造函数绑定">一、 构造函数绑定</h2><p>第一种方法也是最简单的方法，使用call或apply方法(该种方式不能继承原型链)，call和apply函数都可以将一个函数绑定到一个对象上，或者是在子对象中继承父类的方法。两者的差异是给调用的函数，传递参数的方式不同（call是参数，apply是参数数组，且往往和arguments配合使用，需要父类和子类的参数顺序完全相同，否则需要重新定义一个数组）。<br>将父对象的构造函数绑定在子对象上，即在子对象构造函数中加一行：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name,color</span>)</span>&#123;</span><br><span class="line">    Animal.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>);</span><br><span class="line">alert(cat1.species); <span class="comment">// 动物</span></span><br></pre></td></tr></table></figure></p>
<p>call和apply方法其实是通过对象冒充实现的<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span><span class="params">(name,color)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.f = Animal;</span><br><span class="line">    <span class="keyword">this</span>.f();</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>起到和上面一样的效果，而且对象冒充可以实现多重继承<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span><span class="params">(name,color)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="keyword">this</span>.f = Animal;</span><br><span class="line">    <span class="keyword">this</span>.f();</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.f;</span><br><span class="line">    <span class="keyword">this</span>.f = Pet;</span><br><span class="line">    <span class="keyword">this</span>.f();</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里存在一个弊端，如果存在两个类 Animal和 Pet 具有同名的属性或方法，Pet 具有高优先级。因为它从后面的类继承。除这点小问题之外，用对象冒充实现多重继承机制轻而易举。同理，call和apply一样。</p>
<h2 id="二、_prototype模式">二、 prototype模式</h2><p>第二种方法更常见，使用prototype属性。<br>如果”猫”的prototype对象，指向一个Animal的实例，那么所有”猫”的实例，就能继承Animal了。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Cat</span>.prototype = new Animal();</span><br><span class="line"><span class="keyword">Cat</span>.prototype.constructor = <span class="keyword">Cat</span>;</span><br><span class="line"><span class="keyword">var</span> cat1 = new <span class="keyword">Cat</span>(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>);</span><br><span class="line">alert(cat1.species); <span class="comment">// 动物</span></span><br></pre></td></tr></table></figure></p>
<p>代码的第一行，我们将Cat的prototype对象指向一个Animal的实例。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cat.prototype = <span class="keyword">new</span> Animal();</span><br></pre></td></tr></table></figure></p>
<p>它相当于完全删除了prototype 对象原先的值，然后赋予一个新值。但是，第二行又是什么意思呢？<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cat.prototype.constructor = Cat;</span><br></pre></td></tr></table></figure></p>
<p>原来，任何一个prototype对象都有一个constructor属性，指向它的构造函数。如果没有”Cat.prototype = new Animal();”这一行，<br>Cat.prototype.constructor是指向Cat的；加了这一行以后，Cat.prototype.constructor指向Animal。<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(Cat.prototype.<span class="keyword">constructor</span> == Animal); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>
<p>更重要的是，每一个实例也有一个constructor属性，默认调用prototype对象的constructor属性。<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(cat1.<span class="keyword">constructor</span> == Cat.prototype.<span class="keyword">constructor</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p>
<p>因此，在运行”Cat.prototype = new Animal();”这一行之后，cat1.constructor也指向Animal！<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(cat1.constructor == <span class="constant">Animal</span>); <span class="regexp">//</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>这显然会导致继承链的紊乱（cat1明明是用构造函数Cat生成的），因此我们必须手动纠正，将Cat.prototype对象的constructor值改为Cat。这就是第二行的意思。<br>这是很重要的一点，编程时务必要遵守。下文都遵循这一点，即如果替换了prototype对象，<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">o.prototype = &#123;&#125;<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>那么，下一步必然是为新的prototype对象加上constructor属性，并将这个属性指回原来的构造函数。<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">o.prototype.<span class="keyword">constructor</span> = o;</span><br></pre></td></tr></table></figure></p>
<h2 id="三、_直接继承prototype">三、 直接继承prototype</h2><p>第三种方法是对第二种方法的改进。由于Animal对象中，不变的属性都可以直接写入Animal.prototype。所以，我们也可以让Cat()跳过 Animal()，直接继承Animal.prototype。<br>现在，我们先将Animal对象改写：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span><span class="params">()</span></span>&#123; &#125;</span><br><span class="line">Animal.prototype.species = <span class="string">"动物"</span>;</span><br></pre></td></tr></table></figure></p>
<p>然后，将Cat的prototype对象，然后指向Animal的prototype对象，这样就完成了继承。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Cat</span>.prototype = Animal.prototype;</span><br><span class="line"><span class="keyword">Cat</span>.prototype.constructor = <span class="keyword">Cat</span>;</span><br><span class="line"><span class="keyword">var</span> cat1 = new <span class="keyword">Cat</span>(“大毛”,”黄色”);</span><br><span class="line">alert(cat1.species); <span class="comment">// 动物</span></span><br></pre></td></tr></table></figure></p>
<p>与前一种方法相比，这样做的优点是效率比较高（不用执行和建立Animal的实例了），比较省内存。缺点是 Cat.prototype和Animal.prototype现在指向了同一个对象，那么任何对Cat.prototype的修改，都会反映到Animal.prototype。<br>所以，上面这一段代码其实是有问题的。请看第二行<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Cat</span>.prototype.constructor = <span class="keyword">Cat</span>;</span><br></pre></td></tr></table></figure></p>
<p>这一句实际上把Animal.prototype对象的constructor属性也改掉了！<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(Animal.prototype.<span class="keyword">constructor</span>); <span class="comment">// Cat</span></span><br></pre></td></tr></table></figure></p>
<h2 id="四、_利用空对象作为中介">四、 利用空对象作为中介</h2><p>由于”直接继承prototype”存在上述的缺点，所以就有第四种方法，利用一个空对象作为中介。<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span><span class="params">()</span><span class="comment">&#123;&#125;</span>;</span></span><br><span class="line">F.prototype = Animal.prototype;</span><br><span class="line">Cat.prototype = <span class="keyword">new</span> F();</span><br><span class="line">Cat.prototype.<span class="keyword">constructor</span> = Cat;</span><br></pre></td></tr></table></figure></p>
<p>F是空对象，所以几乎不占内存。这时，修改Cat的prototype对象，就不会影响到Animal的prototype对象。<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(Animal.prototype.<span class="keyword">constructor</span>); <span class="comment">// Animal</span></span><br></pre></td></tr></table></figure></p>
<p>我们将上面的方法，封装成一个函数，便于使用。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span><span class="params">(Child, Parent)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    F.prototype = <span class="keyword">Parent</span>.prototype;</span><br><span class="line">    Child.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    Child.prototype.constructor = Child;</span><br><span class="line">    Child.uber = <span class="keyword">Parent</span>.prototype;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用的时候，方法如下<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">extend<span class="list">(<span class="keyword">Cat</span>,Animal)</span><span class="comment">;</span></span><br><span class="line">var cat1 = new Cat<span class="list">(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>)</span><span class="comment">;</span></span><br><span class="line">alert<span class="list">(<span class="keyword">cat1</span>.species)</span><span class="comment">; // 动物</span></span><br></pre></td></tr></table></figure></p>
<p>这个extend函数，就是YUI库如何实现继承的方法。<br>另外，说明一点，函数体最后一行<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Child.uber = Parent.prototype<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>意思是为子对象设一个uber属性，这个属性直接指向父对象的prototype属性。（uber是一个德语词，意思是”向上”、”上一层”。）这等于在子对象上打开一条通道，可以直接调用父对象的方法。这一行放在这里，只是为了实现继承的完备性，纯属备用性质。</p>
<h2 id="五、_混合继承">五、 混合继承</h2><p>首先来分析构造函数和原型链两种实现继承方式的缺陷：<br>构造函数（对象冒充）的主要问题是必须使用构造函数方式，且无法继承通过原型定义的方法，这不是最好的选择。不过如果使用原型链，就无法使用带参数的构造函数了。开发者如何选择呢？答案很简单，两者都用。<br>于是有了第五种方法“构造函数+原型混合方式”<br>这种继承方式使用构造函数定义类，并非使用任何原型。创建类的最好方式是用构造函数定义属性，用原型定义方法。这种方式同样适用于继承机制，用对象冒充继承构造函数的属性，用原型链继承 prototype 对象的方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"一只"</span> + <span class="keyword">this</span>.color + <span class="string">"色的动物在跑！"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">color, name</span>) </span>&#123;</span><br><span class="line">    Animal.call(<span class="keyword">this</span>, color);</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Cat.prototype = <span class="keyword">new</span> Animal();</span><br><span class="line">Cat.prototype.constructor = Cat;</span><br><span class="line">Cat.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"我的名字叫"</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> animal1 = <span class="keyword">new</span> Animal(<span class="string">"blue"</span>);</span><br><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">"red"</span>, <span class="string">"John"</span>);</span><br><span class="line">animal1.run(); <span class="comment">//输出 "blue"</span></span><br><span class="line">cat1.run(); <span class="comment">//输出 "red"</span></span><br><span class="line">cat1.sayName(); <span class="comment">//输出 "John"</span></span><br></pre></td></tr></table></figure></p>
<h2 id="六、_拷贝继承">六、 拷贝继承</h2><p>上面是采用prototype对象，实现继承。我们也可以换一种思路，纯粹采用”拷贝”方法实现继承。简单说，如果把父对象的所有属性和方法，拷贝进子对象，不也能够实现继承吗？这样我们就有了第六种方法。<br>首先，还是把Animal的所有不变属性，都放到它的prototype对象上。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Animal.prototype.species = <span class="string">"动物"</span>;</span><br></pre></td></tr></table></figure></p>
<p>然后，再写一个函数，实现属性拷贝的目的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend2</span>(<span class="params">Child, Parent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p = Parent.prototype;</span><br><span class="line">    <span class="keyword">var</span> c = Child.prototype;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> p) &#123;</span><br><span class="line">        c = p;</span><br><span class="line">    &#125;</span><br><span class="line">    c.uber = p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个函数的作用，就是将父对象的prototype对象中的属性，一一拷贝给Child对象的prototype对象。<br>使用的时候，这样写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">extend2(Cat, Animal);</span><br><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>);</span><br><span class="line">alert(cat1.species); <span class="comment">// 动物</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天整理了一下js如何实现继承，js是门灵活的语言，实现一种功能往往有多种做法,ECMAScript没有明确的继承机制，而是通过模仿实现的，根据js语言的本身的特性,js实现继承有以下通用的几种方式&lt;br&gt;比如，现在有一个”动物”对象的构造函数。&lt;br&gt;&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.species = &lt;span class=&quot;string&quot;&gt;&quot;动物&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://hellowvirgil.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
